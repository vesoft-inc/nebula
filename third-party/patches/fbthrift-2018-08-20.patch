diff --git a/thrift/compiler/parse/thriftl.ll b/thrift/compiler/parse/thriftl.ll
index 703ea6e19..b33be69d1 100644
--- a/thrift/compiler/parse/thriftl.ll
+++ b/thrift/compiler/parse/thriftl.ll
@@ -312,27 +312,23 @@ st_identifier ([a-zA-Z-][\.a-zA-Z_0-9-]*)
 }

 {identifier} {
-  const char *val = strdup(yytext);
-  return apache::thrift::yy::parser::make_tok_identifier(val);
+  return apache::thrift::yy::parser::make_tok_identifier(std::string{yytext});
 }

 {st_identifier} {
-  const char *val = strdup(yytext);
-  return apache::thrift::yy::parser::make_tok_st_identifier(val);
+  return apache::thrift::yy::parser::make_tok_st_identifier(std::string{yytext});
 }

 {dliteral} {
-  char *val = strdup(yytext+1);
-  val[strlen(val)-1] = '\0';
-  const char *const_val = val;
-  return apache::thrift::yy::parser::make_tok_literal(const_val);
+  std::string val{yytext + 1};
+  val = val.substr(0, val.length() - 1);
+  return apache::thrift::yy::parser::make_tok_literal(std::move(val));
 }

 {sliteral} {
-  char *val = strdup(yytext+1);
-  val[strlen(val)-1] = '\0';
-  const char *const_val = val;
-  return apache::thrift::yy::parser::make_tok_literal(const_val);
+  std::string val{yytext + 1};
+  val = val.substr(0, val.length() - 1);
+  return apache::thrift::yy::parser::make_tok_literal(std::move(val));
 }

 {doctext} {
diff --git a/thrift/compiler/parse/thrifty.yy b/thrift/compiler/parse/thrifty.yy
index d4b65bbe6..988956569 100644
--- a/thrift/compiler/parse/thrifty.yy
+++ b/thrift/compiler/parse/thrifty.yy
@@ -67,7 +67,7 @@ int32_t y_enum_val = -1;
 int g_arglist = 0;
 const int struct_is_struct = 0;
 const int struct_is_union = 1;
-char* y_enum_name = nullptr;
+const char* y_enum_name = nullptr;

 // Define an enum class for all types that have lineno embedded.
 enum class LineType {
@@ -125,10 +125,10 @@ class parsing_driver;
 /**
  * Strings identifier
  */
-%token<char*>     tok_identifier
-%token<char*>     tok_literal
-%token<char*>     tok_doctext
-%token<char*>     tok_st_identifier
+%token<std::string>     tok_identifier
+%token<std::string>     tok_literal
+%token<char*>           tok_doctext
+%token<std::string>     tok_st_identifier

 /**
  * Constant values
@@ -242,7 +242,7 @@ class parsing_driver;
 %type<t_type*>          TypeAnnotations
 %type<t_type*>          TypeAnnotationList
 %type<t_annotation*>    TypeAnnotation
-%type<char*>            TypeAnnotationValue
+%type<std::string>      TypeAnnotationValue
 %type<t_type*>          FunctionAnnotations

 %type<t_field*>         Field
@@ -287,7 +287,7 @@ class parsing_driver;
 %type<bool>             Oneway

 %type<char*>            CaptureDocText
-%type<char*>            IntOrLiteral
+%type<std::string>      IntOrLiteral

 %%

@@ -602,7 +602,7 @@ Enum:
   tok_identifier
     {
       assert(y_enum_name == nullptr);
-      y_enum_name = $3;
+      y_enum_name = $3.c_str();
     }
   "{" EnumDefList "}" TypeAnnotations
     {
@@ -666,7 +666,7 @@ EnumValue:
     {
       driver.debug("EnumValue -> tok_identifier = tok_int_constant");
       if ($3 < 0 && !driver.params.allow_neg_enum_vals) {
-        driver.warning(1, "Negative value supplied for enum %s.", $1);
+        driver.warning(1, "Negative value supplied for enum %s.", $1.c_str());
       }
       if ($3 < INT32_MIN || $3 > INT32_MAX) {
         // Note: this used to be just a warning.  However, since thrift always
@@ -674,7 +674,7 @@ EnumValue:
         // I doubt this will affect many people, but users who run into this
         // will have to update their thrift files to manually specify the
         // truncated i32 value that thrift has always been using anyway.
-        driver.failure("64-bit value supplied for enum %s will be truncated.", $1);
+        driver.failure("64-bit value supplied for enum %s will be truncated.", $1.c_str());
       }
       y_enum_val = $3;
       $$ = new t_enum_value($1, y_enum_val);
@@ -685,7 +685,7 @@ EnumValue:
     {
       driver.debug("EnumValue -> tok_identifier");
       if (y_enum_val == INT32_MAX) {
-        driver.failure("enum value overflow at enum %s", $1);
+        driver.failure("enum value overflow at enum %s", $1.c_str());
       }
       $$ = new t_enum_value($1);

@@ -754,7 +754,7 @@ ConstValue:
         $$ = new t_const_value(*const_value);
       } else {
         if (driver.mode == apache::thrift::parsing_mode::PROGRAM) {
-          driver.warning(1, "Constant strings should be quoted: %s", $1);
+          driver.warning(1, "Constant strings should be quoted: %s", $1.c_str());
         }
         $$ = new t_const_value($1);
       }
@@ -878,13 +878,13 @@ Xception:

         if (!$$->has_field_named(v.c_str())) {
           driver.failure("member specified as exception 'message' should be a valid"
-                         " struct member, '%s' in '%s' is not", v.c_str(), $3);
+                         " struct member, '%s' in '%s' is not", v.c_str(), $3.c_str());
         }

         auto field = $$->get_field_named(v.c_str());
         if (!field->get_type()->is_string()) {
           driver.failure("member specified as exception 'message' should be of type "
-                         "STRING, '%s' in '%s' is not", v.c_str(), $3);
+                         "STRING, '%s' in '%s' is not", v.c_str(), $3.c_str());
         }
       }

@@ -929,7 +929,7 @@ Extends:
           $$ = driver.scope_cache->get_service(driver.program->get_name() + "." + $2);
         }
         if ($$ == NULL) {
-          driver.yyerror("Service \"%s\" has not been defined.", $2);
+          driver.yyerror("Service \"%s\" has not been defined.", $2.c_str());
           driver.end_parsing();
         }
       }
@@ -1092,7 +1092,7 @@ Field:
     {
       driver.debug("tok_int_constant : Field -> FieldType tok_identifier");
       if ($2.auto_assigned) {
-        driver.warning(1, "No field key specified for %s, resulting protocol may have conflicts or not be backwards compatible!", $5);
+        driver.warning(1, "No field key specified for %s, resulting protocol may have conflicts or not be backwards compatible!", $5.c_str());
         if (driver.params.strict >= 192) {
           driver.yyerror("Implicit field keys are deprecated and not allowed with -strict");
           driver.end_parsing();
@@ -1477,7 +1477,7 @@ TypeAnnotationValue:
 |
     {
       driver.debug("TypeAnnotationValue ->");
-      $$ = strdup("1");
+      $$ = "1";
     }

 FunctionAnnotations:
@@ -1519,7 +1519,7 @@ IntOrLiteral:
       char buf[21];  // max len of int64_t as string + null terminator
       driver.debug("IntOrLiteral -> tok_bool_constant");
       sprintf(buf, "%" PRIi64, $1);
-      $$ = strdup(buf);
+      $$ = buf;
     }
 |
   tok_int_constant
@@ -1527,7 +1527,7 @@ IntOrLiteral:
       char buf[21];  // max len of int64_t as string + null terminator
       driver.debug("IntOrLiteral -> tok_int_constant");
       sprintf(buf, "%" PRIi64, $1);
-      $$ = strdup(buf);
+      $$ = buf;
     }

 %%
