/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "./gen-cpp2/THBaseService.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TGet*>> THBaseService_exists_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_BOOL, bool*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_exists_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>*>> THBaseService_existsAll_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector<bool>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_existsAll_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TGet*>> THBaseService_get_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TResult*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_get_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>*>> THBaseService_getMultiple_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_getMultiple_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TPut*>> THBaseService_put_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_put_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<3, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<4, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<5, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<6, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TPut*>> THBaseService_checkAndPut_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_BOOL, bool*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_checkAndPut_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>*>> THBaseService_putMultiple_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_putMultiple_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete*>> THBaseService_deleteSingle_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_deleteSingle_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>*>> THBaseService_deleteMultiple_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_deleteMultiple_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<3, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<4, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<5, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<6, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete*>> THBaseService_checkAndDelete_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_BOOL, bool*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_checkAndDelete_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement*>> THBaseService_increment_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TResult*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_increment_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TAppend*>> THBaseService_append_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TResult*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_append_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TScan*>> THBaseService_openScanner_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_openScanner_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_I32, int32_t*>> THBaseService_getScannerRows_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>> THBaseService_getScannerRows_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>> THBaseService_closeScanner_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>> THBaseService_closeScanner_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations*>> THBaseService_mutateRow_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_mutateRow_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TScan*>, apache::thrift::FieldData<3, apache::thrift::protocol::T_I32, int32_t*>> THBaseService_getScannerResults_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_getScannerResults_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<3, apache::thrift::protocol::T_BOOL, bool*>> THBaseService_getRegionLocation_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_getRegionLocation_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>> THBaseService_getAllRegionLocations_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_LIST, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_getAllRegionLocations_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<3, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<4, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<5, apache::thrift::protocol::T_I32,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp*>, apache::thrift::FieldData<6, apache::thrift::protocol::T_STRING, std::string*>, apache::thrift::FieldData<7, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations*>> THBaseService_checkAndMutate_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_BOOL, bool*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError>> THBaseService_checkAndMutate_presult;
template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_exists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_exists_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tget = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TGet>();
  args.get<1>().value = uarg_tget.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.exists", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function exists";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("exists", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function exists";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<bool>>(std::move(req), std::move(ctxStack), return_exists<ProtocolIn_,ProtocolOut_>, throw_wrapped_exists<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_exists(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_exists(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return) {
  ProtocolOut_ prot;
  THBaseService_exists_presult result;
  result.get<0>().value = const_cast<bool*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("exists", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_exists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_exists_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function exists";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("exists", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function exists";
    }
  }
  auto queue = serializeResponse("exists", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_existsAll(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_existsAll_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tgets = std::make_unique<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>>();
  args.get<1>().value = uarg_tgets.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.existsAll", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function existsAll";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("existsAll", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function existsAll";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector<bool>>>(std::move(req), std::move(ctxStack), return_existsAll<ProtocolIn_,ProtocolOut_>, throw_wrapped_existsAll<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_existsAll(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_existsAll(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector<bool> const& _return) {
  ProtocolOut_ prot;
  THBaseService_existsAll_presult result;
  result.get<0>().value = const_cast<std::vector<bool>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("existsAll", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_existsAll(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_existsAll_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function existsAll";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("existsAll", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function existsAll";
    }
  }
  auto queue = serializeResponse("existsAll", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_get(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_get_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tget = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TGet>();
  args.get<1>().value = uarg_tget.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.get", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function get";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("get", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function get";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>(std::move(req), std::move(ctxStack), return_get<ProtocolIn_,ProtocolOut_>, throw_wrapped_get<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_get(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_get(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return) {
  ProtocolOut_ prot;
  THBaseService_get_presult result;
  result.get<0>().value = const_cast< ::apache::hadoop::hbase::thrift2::cpp2::TResult*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("get", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_get(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_get_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function get";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("get", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function get";
    }
  }
  auto queue = serializeResponse("get", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_getMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_getMultiple_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tgets = std::make_unique<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>>();
  args.get<1>().value = uarg_tgets.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.getMultiple", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function getMultiple";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("getMultiple", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function getMultiple";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>>(std::move(req), std::move(ctxStack), return_getMultiple<ProtocolIn_,ProtocolOut_>, throw_wrapped_getMultiple<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_getMultiple(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_getMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return) {
  ProtocolOut_ prot;
  THBaseService_getMultiple_presult result;
  result.get<0>().value = const_cast<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("getMultiple", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_getMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_getMultiple_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function getMultiple";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("getMultiple", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function getMultiple";
    }
  }
  auto queue = serializeResponse("getMultiple", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_put_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tput = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TPut>();
  args.get<1>().value = uarg_tput.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.put", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function put";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("put", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function put";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<void>>(std::move(req), std::move(ctxStack), return_put<ProtocolIn_,ProtocolOut_>, throw_wrapped_put<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_put(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_put(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  THBaseService_put_presult result;
  return serializeResponse("put", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_put_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<0>().ref() = e;
    result.setIsSet(0, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function put";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("put", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function put";
    }
  }
  auto queue = serializeResponse("put", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_checkAndPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_checkAndPut_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_row = std::make_unique<std::string>();
  args.get<1>().value = uarg_row.get();
  auto uarg_family = std::make_unique<std::string>();
  args.get<2>().value = uarg_family.get();
  auto uarg_qualifier = std::make_unique<std::string>();
  args.get<3>().value = uarg_qualifier.get();
  auto uarg_value = std::make_unique<std::string>();
  args.get<4>().value = uarg_value.get();
  auto uarg_tput = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TPut>();
  args.get<5>().value = uarg_tput.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.checkAndPut", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function checkAndPut";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("checkAndPut", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function checkAndPut";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<bool>>(std::move(req), std::move(ctxStack), return_checkAndPut<ProtocolIn_,ProtocolOut_>, throw_wrapped_checkAndPut<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_checkAndPut(std::move(callback), args.get<0>().ref(), args.get<1>().ref(), args.get<2>().ref(), args.get<3>().ref(), args.get<4>().ref(), args.get<5>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_checkAndPut(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return) {
  ProtocolOut_ prot;
  THBaseService_checkAndPut_presult result;
  result.get<0>().value = const_cast<bool*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("checkAndPut", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_checkAndPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_checkAndPut_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function checkAndPut";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("checkAndPut", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function checkAndPut";
    }
  }
  auto queue = serializeResponse("checkAndPut", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_putMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_putMultiple_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tputs = std::make_unique<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>>();
  args.get<1>().value = uarg_tputs.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.putMultiple", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function putMultiple";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("putMultiple", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function putMultiple";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<void>>(std::move(req), std::move(ctxStack), return_putMultiple<ProtocolIn_,ProtocolOut_>, throw_wrapped_putMultiple<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_putMultiple(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_putMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  THBaseService_putMultiple_presult result;
  return serializeResponse("putMultiple", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_putMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_putMultiple_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<0>().ref() = e;
    result.setIsSet(0, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function putMultiple";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("putMultiple", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function putMultiple";
    }
  }
  auto queue = serializeResponse("putMultiple", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_deleteSingle(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_deleteSingle_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tdelete = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>();
  args.get<1>().value = uarg_tdelete.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.deleteSingle", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function deleteSingle";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("deleteSingle", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function deleteSingle";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<void>>(std::move(req), std::move(ctxStack), return_deleteSingle<ProtocolIn_,ProtocolOut_>, throw_wrapped_deleteSingle<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_deleteSingle(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_deleteSingle(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  THBaseService_deleteSingle_presult result;
  return serializeResponse("deleteSingle", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_deleteSingle(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_deleteSingle_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<0>().ref() = e;
    result.setIsSet(0, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function deleteSingle";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("deleteSingle", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function deleteSingle";
    }
  }
  auto queue = serializeResponse("deleteSingle", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_deleteMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_deleteMultiple_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tdeletes = std::make_unique<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>>();
  args.get<1>().value = uarg_tdeletes.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.deleteMultiple", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function deleteMultiple";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("deleteMultiple", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function deleteMultiple";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>>>(std::move(req), std::move(ctxStack), return_deleteMultiple<ProtocolIn_,ProtocolOut_>, throw_wrapped_deleteMultiple<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_deleteMultiple(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_deleteMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete> const& _return) {
  ProtocolOut_ prot;
  THBaseService_deleteMultiple_presult result;
  result.get<0>().value = const_cast<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("deleteMultiple", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_deleteMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_deleteMultiple_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function deleteMultiple";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("deleteMultiple", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function deleteMultiple";
    }
  }
  auto queue = serializeResponse("deleteMultiple", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_checkAndDelete(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_checkAndDelete_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_row = std::make_unique<std::string>();
  args.get<1>().value = uarg_row.get();
  auto uarg_family = std::make_unique<std::string>();
  args.get<2>().value = uarg_family.get();
  auto uarg_qualifier = std::make_unique<std::string>();
  args.get<3>().value = uarg_qualifier.get();
  auto uarg_value = std::make_unique<std::string>();
  args.get<4>().value = uarg_value.get();
  auto uarg_tdelete = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>();
  args.get<5>().value = uarg_tdelete.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.checkAndDelete", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function checkAndDelete";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("checkAndDelete", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function checkAndDelete";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<bool>>(std::move(req), std::move(ctxStack), return_checkAndDelete<ProtocolIn_,ProtocolOut_>, throw_wrapped_checkAndDelete<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_checkAndDelete(std::move(callback), args.get<0>().ref(), args.get<1>().ref(), args.get<2>().ref(), args.get<3>().ref(), args.get<4>().ref(), args.get<5>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_checkAndDelete(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return) {
  ProtocolOut_ prot;
  THBaseService_checkAndDelete_presult result;
  result.get<0>().value = const_cast<bool*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("checkAndDelete", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_checkAndDelete(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_checkAndDelete_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function checkAndDelete";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("checkAndDelete", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function checkAndDelete";
    }
  }
  auto queue = serializeResponse("checkAndDelete", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_increment(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_increment_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tincrement = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>();
  args.get<1>().value = uarg_tincrement.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.increment", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function increment";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("increment", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function increment";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>(std::move(req), std::move(ctxStack), return_increment<ProtocolIn_,ProtocolOut_>, throw_wrapped_increment<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_increment(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_increment(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return) {
  ProtocolOut_ prot;
  THBaseService_increment_presult result;
  result.get<0>().value = const_cast< ::apache::hadoop::hbase::thrift2::cpp2::TResult*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("increment", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_increment(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_increment_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function increment";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("increment", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function increment";
    }
  }
  auto queue = serializeResponse("increment", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_append(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_append_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tappend = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>();
  args.get<1>().value = uarg_tappend.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.append", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function append";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("append", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function append";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>(std::move(req), std::move(ctxStack), return_append<ProtocolIn_,ProtocolOut_>, throw_wrapped_append<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_append(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_append(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return) {
  ProtocolOut_ prot;
  THBaseService_append_presult result;
  result.get<0>().value = const_cast< ::apache::hadoop::hbase::thrift2::cpp2::TResult*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("append", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_append(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_append_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function append";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("append", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function append";
    }
  }
  auto queue = serializeResponse("append", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_openScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_openScanner_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tscan = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TScan>();
  args.get<1>().value = uarg_tscan.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.openScanner", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function openScanner";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("openScanner", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function openScanner";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<int32_t>>(std::move(req), std::move(ctxStack), return_openScanner<ProtocolIn_,ProtocolOut_>, throw_wrapped_openScanner<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_openScanner(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_openScanner(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int32_t const& _return) {
  ProtocolOut_ prot;
  THBaseService_openScanner_presult result;
  result.get<0>().value = const_cast<int32_t*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("openScanner", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_openScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_openScanner_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function openScanner";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("openScanner", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function openScanner";
    }
  }
  auto queue = serializeResponse("openScanner", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_getScannerRows(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_getScannerRows_pargs args;
  int32_t uarg_scannerId{0};
  args.get<0>().value = &uarg_scannerId;
  int32_t uarg_numRows{0};
  args.get<1>().value = &uarg_numRows;
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.getScannerRows", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function getScannerRows";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("getScannerRows", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function getScannerRows";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>>(std::move(req), std::move(ctxStack), return_getScannerRows<ProtocolIn_,ProtocolOut_>, throw_wrapped_getScannerRows<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_getScannerRows(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_getScannerRows(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return) {
  ProtocolOut_ prot;
  THBaseService_getScannerRows_presult result;
  result.get<0>().value = const_cast<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("getScannerRows", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_getScannerRows(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_getScannerRows_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<2>().ref() = e;
    result.setIsSet(2, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function getScannerRows";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("getScannerRows", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function getScannerRows";
    }
  }
  auto queue = serializeResponse("getScannerRows", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_closeScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_closeScanner_pargs args;
  int32_t uarg_scannerId{0};
  args.get<0>().value = &uarg_scannerId;
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.closeScanner", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function closeScanner";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("closeScanner", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function closeScanner";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<void>>(std::move(req), std::move(ctxStack), return_closeScanner<ProtocolIn_,ProtocolOut_>, throw_wrapped_closeScanner<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_closeScanner(std::move(callback), args.get<0>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_closeScanner(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  THBaseService_closeScanner_presult result;
  return serializeResponse("closeScanner", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_closeScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_closeScanner_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<0>().ref() = e;
    result.setIsSet(0, true);
  }
  )) {} else
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function closeScanner";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("closeScanner", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function closeScanner";
    }
  }
  auto queue = serializeResponse("closeScanner", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_mutateRow(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_mutateRow_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_trowMutations = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>();
  args.get<1>().value = uarg_trowMutations.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.mutateRow", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function mutateRow";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("mutateRow", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function mutateRow";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<void>>(std::move(req), std::move(ctxStack), return_mutateRow<ProtocolIn_,ProtocolOut_>, throw_wrapped_mutateRow<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_mutateRow(std::move(callback), args.get<0>().ref(), args.get<1>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_mutateRow(int32_t protoSeqId, apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  THBaseService_mutateRow_presult result;
  return serializeResponse("mutateRow", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_mutateRow(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_mutateRow_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<0>().ref() = e;
    result.setIsSet(0, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function mutateRow";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("mutateRow", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function mutateRow";
    }
  }
  auto queue = serializeResponse("mutateRow", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_getScannerResults(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_getScannerResults_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_tscan = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TScan>();
  args.get<1>().value = uarg_tscan.get();
  int32_t uarg_numRows{0};
  args.get<2>().value = &uarg_numRows;
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.getScannerResults", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function getScannerResults";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("getScannerResults", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function getScannerResults";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>>(std::move(req), std::move(ctxStack), return_getScannerResults<ProtocolIn_,ProtocolOut_>, throw_wrapped_getScannerResults<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_getScannerResults(std::move(callback), args.get<0>().ref(), args.get<1>().ref(), args.get<2>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_getScannerResults(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return) {
  ProtocolOut_ prot;
  THBaseService_getScannerResults_presult result;
  result.get<0>().value = const_cast<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("getScannerResults", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_getScannerResults(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_getScannerResults_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function getScannerResults";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("getScannerResults", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function getScannerResults";
    }
  }
  auto queue = serializeResponse("getScannerResults", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_getRegionLocation(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_getRegionLocation_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_row = std::make_unique<std::string>();
  args.get<1>().value = uarg_row.get();
  bool uarg_reload{0};
  args.get<2>().value = &uarg_reload;
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.getRegionLocation", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function getRegionLocation";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("getRegionLocation", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function getRegionLocation";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>>(std::move(req), std::move(ctxStack), return_getRegionLocation<ProtocolIn_,ProtocolOut_>, throw_wrapped_getRegionLocation<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_getRegionLocation(std::move(callback), args.get<0>().ref(), args.get<1>().ref(), args.get<2>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_getRegionLocation(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation const& _return) {
  ProtocolOut_ prot;
  THBaseService_getRegionLocation_presult result;
  result.get<0>().value = const_cast< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("getRegionLocation", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_getRegionLocation(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_getRegionLocation_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function getRegionLocation";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("getRegionLocation", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function getRegionLocation";
    }
  }
  auto queue = serializeResponse("getRegionLocation", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_getAllRegionLocations(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_getAllRegionLocations_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.getAllRegionLocations", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function getAllRegionLocations";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("getAllRegionLocations", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function getAllRegionLocations";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>>>(std::move(req), std::move(ctxStack), return_getAllRegionLocations<ProtocolIn_,ProtocolOut_>, throw_wrapped_getAllRegionLocations<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_getAllRegionLocations(std::move(callback), args.get<0>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_getAllRegionLocations(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> const& _return) {
  ProtocolOut_ prot;
  THBaseService_getAllRegionLocations_presult result;
  result.get<0>().value = const_cast<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("getAllRegionLocations", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_getAllRegionLocations(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_getAllRegionLocations_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function getAllRegionLocations";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("getAllRegionLocations", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function getAllRegionLocations";
    }
  }
  auto queue = serializeResponse("getAllRegionLocations", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

template <typename ProtocolIn_, typename ProtocolOut_>
void THBaseServiceAsyncProcessor::process_checkAndMutate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  THBaseService_checkAndMutate_pargs args;
  auto uarg_table = std::make_unique<std::string>();
  args.get<0>().value = uarg_table.get();
  auto uarg_row = std::make_unique<std::string>();
  args.get<1>().value = uarg_row.get();
  auto uarg_family = std::make_unique<std::string>();
  args.get<2>().value = uarg_family.get();
  auto uarg_qualifier = std::make_unique<std::string>();
  args.get<3>().value = uarg_qualifier.get();
   ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp uarg_compareOp{static_cast< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>(0)};
  args.get<4>().value = &uarg_compareOp;
  auto uarg_value = std::make_unique<std::string>();
  args.get<5>().value = uarg_value.get();
  auto uarg_rowMutations = std::make_unique< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>();
  args.get<6>().value = uarg_rowMutations.get();
  std::unique_ptr<apache::thrift::ContextStack> ctxStack(this->getContextStack(this->getServiceName(), "THBaseService.checkAndMutate", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), ctxStack.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function checkAndMutate";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("checkAndMutate", &prot, ctx->getProtoSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getHeader()->getWriteTransforms(), ctx->getHeader()->getMinCompressBytes()));
      eb->runInEventBaseThread([queue = std::move(queue), req = std::move(req)]() mutable {
        if (req->isStream()) {
          req->sendStreamReply({queue.move(), {}});
        } else {
          req->sendReply(queue.move());
        }
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function checkAndMutate";
    }
  }
  auto callback = std::make_unique<apache::thrift::HandlerCallback<bool>>(std::move(req), std::move(ctxStack), return_checkAndMutate<ProtocolIn_,ProtocolOut_>, throw_wrapped_checkAndMutate<ProtocolIn_, ProtocolOut_>, ctx->getProtoSeqId(), eb, tm, ctx);
  ctx->setStartedProcessing();
  iface_->async_eb_checkAndMutate(std::move(callback), args.get<0>().ref(), args.get<1>().ref(), args.get<2>().ref(), args.get<3>().ref(), args.get<4>().ref(), args.get<5>().ref(), args.get<6>().ref());
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue THBaseServiceAsyncProcessor::return_checkAndMutate(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return) {
  ProtocolOut_ prot;
  THBaseService_checkAndMutate_presult result;
  result.get<0>().value = const_cast<bool*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("checkAndMutate", &prot, protoSeqId, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void THBaseServiceAsyncProcessor::throw_wrapped_checkAndMutate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
  THBaseService_checkAndMutate_presult result;
  if (ew.with_exception([&]( ::apache::hadoop::hbase::thrift2::cpp2::TIOError& e) {
    ctx->userExceptionWrapped(true, ew);
    result.get<1>().ref() = e;
    result.setIsSet(1, true);
  }
  )) {} else
   {
    if (req) {
      LOG(ERROR) << ew << " in function checkAndMutate";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userExceptionWrapped(false, ew);
      ctx->handlerErrorWrapped(ew);
      folly::IOBufQueue queue = serializeException("checkAndMutate", &prot, protoSeqId, ctx, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew << " in oneway function checkAndMutate";
    }
  }
  auto queue = serializeResponse("checkAndMutate", &prot, protoSeqId, ctx, result);
  queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getHeader()->getWriteTransforms(), reqCtx->getHeader()->getMinCompressBytes()));
  return req->sendReply(queue.move());
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
