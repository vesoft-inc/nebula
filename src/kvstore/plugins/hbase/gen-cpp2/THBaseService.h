/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/futures/Future.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include "./gen-cpp2/THBaseServiceAsyncClient.h"
#include "./gen-cpp2/hbase_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

class THBaseServiceSvAsyncIf {
 public:
  virtual ~THBaseServiceSvAsyncIf() {}
  virtual void async_eb_exists(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) = 0;
  virtual folly::Future<bool> future_exists(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) = 0;
  virtual void async_eb_existsAll(std::unique_ptr<apache::thrift::HandlerCallback<std::vector<bool>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) = 0;
  virtual folly::Future<std::vector<bool>> future_existsAll(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) = 0;
  virtual void async_eb_get(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) = 0;
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_get(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) = 0;
  virtual void async_eb_getMultiple(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) = 0;
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) = 0;
  virtual void async_eb_put(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) = 0;
  virtual folly::Future<folly::Unit> future_put(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) = 0;
  virtual void async_eb_checkAndPut(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) = 0;
  virtual folly::Future<bool> future_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) = 0;
  virtual void async_eb_putMultiple(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs) = 0;
  virtual folly::Future<folly::Unit> future_putMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs) = 0;
  virtual void async_eb_deleteSingle(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) = 0;
  virtual folly::Future<folly::Unit> future_deleteSingle(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) = 0;
  virtual void async_eb_deleteMultiple(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes) = 0;
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> future_deleteMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes) = 0;
  virtual void async_eb_checkAndDelete(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) = 0;
  virtual folly::Future<bool> future_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) = 0;
  virtual void async_eb_increment(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement) = 0;
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_increment(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement) = 0;
  virtual void async_eb_append(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend) = 0;
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_append(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend) = 0;
  virtual void async_eb_openScanner(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan) = 0;
  virtual folly::Future<int32_t> future_openScanner(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan) = 0;
  virtual void async_eb_getScannerRows(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, int32_t scannerId, int32_t numRows) = 0;
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerRows(int32_t scannerId, int32_t numRows) = 0;
  virtual void async_eb_closeScanner(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int32_t scannerId) = 0;
  virtual folly::Future<folly::Unit> future_closeScanner(int32_t scannerId) = 0;
  virtual void async_eb_mutateRow(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations) = 0;
  virtual folly::Future<folly::Unit> future_mutateRow(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations) = 0;
  virtual void async_eb_getScannerResults(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows) = 0;
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerResults(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows) = 0;
  virtual void async_eb_getRegionLocation(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> callback, const std::string& table, const std::string& row, bool reload) = 0;
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> future_getRegionLocation(const std::string& table, const std::string& row, bool reload) = 0;
  virtual void async_eb_getAllRegionLocations(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>>> callback, const std::string& table) = 0;
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> future_getAllRegionLocations(const std::string& table) = 0;
  virtual void async_eb_checkAndMutate(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations) = 0;
  virtual folly::Future<bool> future_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations) = 0;
};

class THBaseServiceAsyncProcessor;

class THBaseServiceSvIf : public THBaseServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef THBaseServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  virtual bool exists(const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& /*tget*/);
  folly::Future<bool> future_exists(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) override;
  void async_eb_exists(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) override;
  virtual void existsAll(std::vector<bool>& /*_return*/, const std::string& /*table*/, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& /*tgets*/);
  folly::Future<std::vector<bool>> future_existsAll(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) override;
  void async_eb_existsAll(std::unique_ptr<apache::thrift::HandlerCallback<std::vector<bool>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) override;
  virtual void get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& /*_return*/, const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& /*tget*/);
  folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_get(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) override;
  void async_eb_get(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget) override;
  virtual void getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& /*_return*/, const std::string& /*table*/, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& /*tgets*/);
  folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) override;
  void async_eb_getMultiple(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets) override;
  virtual void put(const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& /*tput*/);
  folly::Future<folly::Unit> future_put(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) override;
  void async_eb_put(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) override;
  virtual bool checkAndPut(const std::string& /*table*/, const std::string& /*row*/, const std::string& /*family*/, const std::string& /*qualifier*/, const std::string& /*value*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& /*tput*/);
  folly::Future<bool> future_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) override;
  void async_eb_checkAndPut(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput) override;
  virtual void putMultiple(const std::string& /*table*/, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& /*tputs*/);
  folly::Future<folly::Unit> future_putMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs) override;
  void async_eb_putMultiple(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs) override;
  virtual void deleteSingle(const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& /*tdelete*/);
  folly::Future<folly::Unit> future_deleteSingle(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) override;
  void async_eb_deleteSingle(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) override;
  virtual void deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& /*_return*/, const std::string& /*table*/, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& /*tdeletes*/);
  folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> future_deleteMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes) override;
  void async_eb_deleteMultiple(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>>> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes) override;
  virtual bool checkAndDelete(const std::string& /*table*/, const std::string& /*row*/, const std::string& /*family*/, const std::string& /*qualifier*/, const std::string& /*value*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& /*tdelete*/);
  folly::Future<bool> future_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) override;
  void async_eb_checkAndDelete(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete) override;
  virtual void increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& /*_return*/, const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& /*tincrement*/);
  folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_increment(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement) override;
  void async_eb_increment(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement) override;
  virtual void append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& /*_return*/, const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& /*tappend*/);
  folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_append(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend) override;
  void async_eb_append(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend) override;
  virtual int32_t openScanner(const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& /*tscan*/);
  folly::Future<int32_t> future_openScanner(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan) override;
  void async_eb_openScanner(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan) override;
  virtual void getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& /*_return*/, int32_t /*scannerId*/, int32_t /*numRows*/);
  folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerRows(int32_t scannerId, int32_t numRows) override;
  void async_eb_getScannerRows(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, int32_t scannerId, int32_t numRows) override;
  virtual void closeScanner(int32_t /*scannerId*/);
  folly::Future<folly::Unit> future_closeScanner(int32_t scannerId) override;
  void async_eb_closeScanner(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int32_t scannerId) override;
  virtual void mutateRow(const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& /*trowMutations*/);
  folly::Future<folly::Unit> future_mutateRow(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations) override;
  void async_eb_mutateRow(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations) override;
  virtual void getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& /*_return*/, const std::string& /*table*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& /*tscan*/, int32_t /*numRows*/);
  folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerResults(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows) override;
  void async_eb_getScannerResults(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>>> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows) override;
  virtual void getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& /*_return*/, const std::string& /*table*/, const std::string& /*row*/, bool /*reload*/);
  folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> future_getRegionLocation(const std::string& table, const std::string& row, bool reload) override;
  void async_eb_getRegionLocation(std::unique_ptr<apache::thrift::HandlerCallback< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> callback, const std::string& table, const std::string& row, bool reload) override;
  virtual void getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& /*_return*/, const std::string& /*table*/);
  folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> future_getAllRegionLocations(const std::string& table) override;
  void async_eb_getAllRegionLocations(std::unique_ptr<apache::thrift::HandlerCallback<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>>> callback, const std::string& table) override;
  virtual bool checkAndMutate(const std::string& /*table*/, const std::string& /*row*/, const std::string& /*family*/, const std::string& /*qualifier*/,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp /*compareOp*/, const std::string& /*value*/, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& /*rowMutations*/);
  folly::Future<bool> future_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations) override;
  void async_eb_checkAndMutate(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations) override;
};

class THBaseServiceSvNull : public THBaseServiceSvIf {
 public:
};

class THBaseServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  using BaseAsyncProcessor = void;
  using HasFrozen2 = std::false_type;
 protected:
  THBaseServiceSvIf* iface_;
  folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) override;
 public:
  void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) override;
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<THBaseServiceAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const THBaseServiceAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static const THBaseServiceAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<THBaseServiceAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const THBaseServiceAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static const THBaseServiceAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_exists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_exists(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_exists(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_existsAll(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_existsAll(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector<bool> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_existsAll(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_get(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_get(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_put(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_put(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkAndPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkAndPut(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkAndPut(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_putMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_putMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_putMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_deleteSingle(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_deleteSingle(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_deleteSingle(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_deleteMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_deleteMultiple(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_deleteMultiple(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkAndDelete(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkAndDelete(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkAndDelete(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_increment(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_increment(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_increment(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_append(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_append(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_append(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_openScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_openScanner(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_openScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getScannerRows(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getScannerRows(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getScannerRows(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_closeScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_closeScanner(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_closeScanner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_mutateRow(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_mutateRow(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_mutateRow(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getScannerResults(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getScannerResults(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getScannerResults(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getRegionLocation(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getRegionLocation(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getRegionLocation(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getAllRegionLocations(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getAllRegionLocations(int32_t protoSeqId, apache::thrift::ContextStack* ctx, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getAllRegionLocations(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkAndMutate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkAndMutate(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkAndMutate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  THBaseServiceAsyncProcessor(THBaseServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~THBaseServiceAsyncProcessor() {}
};

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
