/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/gen/module_types_h.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>


// BEGIN declare_enums
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

enum class TDeleteType {
  DELETE_COLUMN = 0,
  DELETE_COLUMNS = 1
};

using _TDeleteType_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<TDeleteType, TDeleteType>;
extern const _TDeleteType_EnumMapFactory::ValuesToNamesMapType _TDeleteType_VALUES_TO_NAMES;
extern const _TDeleteType_EnumMapFactory::NamesToValuesMapType _TDeleteType_NAMES_TO_VALUES;



enum class TDurability {
  SKIP_WAL = 1,
  ASYNC_WAL = 2,
  SYNC_WAL = 3,
  FSYNC_WAL = 4
};

using _TDurability_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<TDurability, TDurability>;
extern const _TDurability_EnumMapFactory::ValuesToNamesMapType _TDurability_VALUES_TO_NAMES;
extern const _TDurability_EnumMapFactory::NamesToValuesMapType _TDurability_NAMES_TO_VALUES;



enum class TCompareOp {
  LESS = 0,
  LESS_OR_EQUAL = 1,
  EQUAL = 2,
  NOT_EQUAL = 3,
  GREATER_OR_EQUAL = 4,
  GREATER = 5,
  NO_OP = 6
};

using _TCompareOp_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<TCompareOp, TCompareOp>;
extern const _TCompareOp_EnumMapFactory::ValuesToNamesMapType _TCompareOp_VALUES_TO_NAMES;
extern const _TCompareOp_EnumMapFactory::NamesToValuesMapType _TCompareOp_NAMES_TO_VALUES;



}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace std {


template<> struct hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType> : public apache::thrift::detail::enum_hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType> {};
template<> struct equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType> : public apache::thrift::detail::enum_equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType> {};


template<> struct hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDurability> : public apache::thrift::detail::enum_hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDurability> {};
template<> struct equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDurability> : public apache::thrift::detail::enum_equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TDurability> {};


template<> struct hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp> : public apache::thrift::detail::enum_hash<typename  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp> {};
template<> struct equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp> : public apache::thrift::detail::enum_equal_to<typename  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>;
#ifndef _MSC_VER
template <> const std::size_t TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::size;
template <> const folly::Range<const  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::names;
#endif
template <> const char* TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::findName( ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType value);
template <> bool TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::findValue(const char* name,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType* outValue);

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::min() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType::DELETE_COLUMN;
}

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::max() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType::DELETE_COLUMNS;
}


template <> struct TEnumDataStorage< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>;
#ifndef _MSC_VER
template <> const std::size_t TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::size;
template <> const folly::Range<const  ::apache::hadoop::hbase::thrift2::cpp2::TDurability*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::names;
#endif
template <> const char* TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::findName( ::apache::hadoop::hbase::thrift2::cpp2::TDurability value);
template <> bool TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::findValue(const char* name,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability* outValue);

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TDurability TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::min() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TDurability::SKIP_WAL;
}

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TDurability TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::max() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TDurability::FSYNC_WAL;
}


template <> struct TEnumDataStorage< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>;
#ifndef _MSC_VER
template <> const std::size_t TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::size;
template <> const folly::Range<const  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::names;
#endif
template <> const char* TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::findName( ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp value);
template <> bool TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::findValue(const char* name,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp* outValue);

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::min() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp::LESS;
}

template <> inline constexpr  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp TEnumTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp>::max() {
  return  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp::NO_OP;
}


}} // apache::thrift


// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TTimeRange;
class TColumn;
class TColumnValue;
class TColumnIncrement;
class TResult;
class TAuthorization;
class TCellVisibility;
class TGet;
class TPut;
class TDelete;
class TIncrement;
class TAppend;
class TScan;
class TMutation;
class TRowMutations;
class THRegionInfo;
class TServerName;
class THRegionLocation;
class TIOError;
class TIllegalArgument;
}}}}} // apache::hadoop::hbase::thrift2::cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TTimeRange final : private apache::thrift::detail::st::ComparisonOperators<TTimeRange> {
 public:

  TTimeRange() :
      minStamp(0),
      maxStamp(0) {}
  // FragileConstructor for use in initialization lists only.
  TTimeRange(apache::thrift::FragileConstructor, int64_t minStamp__arg, int64_t maxStamp__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    minStamp = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    maxStamp = arg.extract();
  }

  TTimeRange(TTimeRange&&) = default;

  TTimeRange(const TTimeRange&) = default;

  TTimeRange& operator=(TTimeRange&&) = default;

  TTimeRange& operator=(const TTimeRange&) = default;
  void __clear();
  int64_t minStamp;
  int64_t maxStamp;
  bool operator==(const TTimeRange& rhs) const;
  bool operator<(const TTimeRange& rhs) const;

  int64_t get_minStamp() const {
    return minStamp;
  }

  int64_t& set_minStamp(int64_t minStamp_) {
    minStamp = minStamp_;
    return minStamp;
  }

  int64_t get_maxStamp() const {
    return maxStamp;
  }

  int64_t& set_maxStamp(int64_t maxStamp_) {
    maxStamp = maxStamp_;
    return maxStamp;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TTimeRange >;
};

void swap(TTimeRange& a, TTimeRange& b);
extern template void TTimeRange::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TTimeRange::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TTimeRange::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TTimeRange::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TTimeRange::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TTimeRange::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TTimeRange::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TTimeRange::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TTimeRange::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TColumn final : private apache::thrift::detail::st::ComparisonOperators<TColumn> {
 public:

  TColumn() :
      timestamp(0) {}
  // FragileConstructor for use in initialization lists only.
  TColumn(apache::thrift::FragileConstructor, std::string family__arg, std::string qualifier__arg, int64_t timestamp__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    family = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    qualifier = arg.extract();
    __isset.qualifier = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    timestamp = arg.extract();
    __isset.timestamp = true;
  }

  TColumn(TColumn&&) = default;

  TColumn(const TColumn&) = default;

  TColumn& operator=(TColumn&&) = default;

  TColumn& operator=(const TColumn&) = default;
  void __clear();
  std::string family;
  std::string qualifier;
  int64_t timestamp;

  struct __isset {
    bool qualifier;
    bool timestamp;
  } __isset = {};
  bool operator==(const TColumn& rhs) const;
  bool operator<(const TColumn& rhs) const;

  const std::string& get_family() const& {
    return family;
  }

  std::string get_family() && {
    return std::move(family);
  }

  template <typename T_TColumn_family_struct_setter = std::string>
  std::string& set_family(T_TColumn_family_struct_setter&& family_) {
    family = std::forward<T_TColumn_family_struct_setter>(family_);
    return family;
  }

  const std::string* get_qualifier() const& {
    return __isset.qualifier ? std::addressof(qualifier) : nullptr;
  }

  std::string* get_qualifier() & {
    return __isset.qualifier ? std::addressof(qualifier) : nullptr;
  }
  std::string* get_qualifier() && = delete;

  template <typename T_TColumn_qualifier_struct_setter = std::string>
  std::string& set_qualifier(T_TColumn_qualifier_struct_setter&& qualifier_) {
    qualifier = std::forward<T_TColumn_qualifier_struct_setter>(qualifier_);
    __isset.qualifier = true;
    return qualifier;
  }

  const int64_t* get_timestamp() const& {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }

  int64_t* get_timestamp() & {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }
  int64_t* get_timestamp() && = delete;

  int64_t& set_timestamp(int64_t timestamp_) {
    timestamp = timestamp_;
    __isset.timestamp = true;
    return timestamp;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TColumn >;
};

void swap(TColumn& a, TColumn& b);
extern template void TColumn::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TColumn::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TColumn::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TColumn::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TColumn::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TColumn::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TColumn::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TColumn::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TColumn::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TColumn* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumn const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumn* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumn const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumn const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TColumnValue final : private apache::thrift::detail::st::ComparisonOperators<TColumnValue> {
 public:

  TColumnValue();

  // FragileConstructor for use in initialization lists only.
  TColumnValue(apache::thrift::FragileConstructor, std::string family__arg, std::string qualifier__arg, std::string value__arg, int64_t timestamp__arg, std::string tags__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    family = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    qualifier = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    timestamp = arg.extract();
    __isset.timestamp = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    tags = arg.extract();
    __isset.tags = true;
  }

  TColumnValue(TColumnValue&&) = default;

  TColumnValue(const TColumnValue&) = default;

  TColumnValue& operator=(TColumnValue&&) = default;

  TColumnValue& operator=(const TColumnValue&) = default;
  void __clear();

  ~TColumnValue();

  std::string family;
  std::string qualifier;
  std::string value;
  int64_t timestamp;
  std::string tags;

  struct __isset {
    bool timestamp;
    bool tags;
  } __isset = {};
  bool operator==(const TColumnValue& rhs) const;
  bool operator<(const TColumnValue& rhs) const;

  const std::string& get_family() const& {
    return family;
  }

  std::string get_family() && {
    return std::move(family);
  }

  template <typename T_TColumnValue_family_struct_setter = std::string>
  std::string& set_family(T_TColumnValue_family_struct_setter&& family_) {
    family = std::forward<T_TColumnValue_family_struct_setter>(family_);
    return family;
  }

  const std::string& get_qualifier() const& {
    return qualifier;
  }

  std::string get_qualifier() && {
    return std::move(qualifier);
  }

  template <typename T_TColumnValue_qualifier_struct_setter = std::string>
  std::string& set_qualifier(T_TColumnValue_qualifier_struct_setter&& qualifier_) {
    qualifier = std::forward<T_TColumnValue_qualifier_struct_setter>(qualifier_);
    return qualifier;
  }

  const std::string& get_value() const& {
    return value;
  }

  std::string get_value() && {
    return std::move(value);
  }

  template <typename T_TColumnValue_value_struct_setter = std::string>
  std::string& set_value(T_TColumnValue_value_struct_setter&& value_) {
    value = std::forward<T_TColumnValue_value_struct_setter>(value_);
    return value;
  }

  const int64_t* get_timestamp() const& {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }

  int64_t* get_timestamp() & {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }
  int64_t* get_timestamp() && = delete;

  int64_t& set_timestamp(int64_t timestamp_) {
    timestamp = timestamp_;
    __isset.timestamp = true;
    return timestamp;
  }

  const std::string* get_tags() const& {
    return __isset.tags ? std::addressof(tags) : nullptr;
  }

  std::string* get_tags() & {
    return __isset.tags ? std::addressof(tags) : nullptr;
  }
  std::string* get_tags() && = delete;

  template <typename T_TColumnValue_tags_struct_setter = std::string>
  std::string& set_tags(T_TColumnValue_tags_struct_setter&& tags_) {
    tags = std::forward<T_TColumnValue_tags_struct_setter>(tags_);
    __isset.tags = true;
    return tags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TColumnValue >;
};

void swap(TColumnValue& a, TColumnValue& b);
extern template void TColumnValue::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TColumnValue::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TColumnValue::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TColumnValue::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TColumnValue::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TColumnValue::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TColumnValue::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TColumnValue::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TColumnValue::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TColumnIncrement final : private apache::thrift::detail::st::ComparisonOperators<TColumnIncrement> {
 public:

  TColumnIncrement() :
      amount(1LL) {}
  // FragileConstructor for use in initialization lists only.
  TColumnIncrement(apache::thrift::FragileConstructor, std::string family__arg, std::string qualifier__arg, int64_t amount__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    family = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    qualifier = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    amount = arg.extract();
    __isset.amount = true;
  }

  TColumnIncrement(TColumnIncrement&&) = default;

  TColumnIncrement(const TColumnIncrement&) = default;

  TColumnIncrement& operator=(TColumnIncrement&&) = default;

  TColumnIncrement& operator=(const TColumnIncrement&) = default;
  void __clear();
  std::string family;
  std::string qualifier;
  int64_t amount;

  struct __isset {
    bool amount;
  } __isset = {};
  bool operator==(const TColumnIncrement& rhs) const;
  bool operator<(const TColumnIncrement& rhs) const;

  const std::string& get_family() const& {
    return family;
  }

  std::string get_family() && {
    return std::move(family);
  }

  template <typename T_TColumnIncrement_family_struct_setter = std::string>
  std::string& set_family(T_TColumnIncrement_family_struct_setter&& family_) {
    family = std::forward<T_TColumnIncrement_family_struct_setter>(family_);
    return family;
  }

  const std::string& get_qualifier() const& {
    return qualifier;
  }

  std::string get_qualifier() && {
    return std::move(qualifier);
  }

  template <typename T_TColumnIncrement_qualifier_struct_setter = std::string>
  std::string& set_qualifier(T_TColumnIncrement_qualifier_struct_setter&& qualifier_) {
    qualifier = std::forward<T_TColumnIncrement_qualifier_struct_setter>(qualifier_);
    return qualifier;
  }

  const int64_t* get_amount() const& {
    return __isset.amount ? std::addressof(amount) : nullptr;
  }

  int64_t* get_amount() & {
    return __isset.amount ? std::addressof(amount) : nullptr;
  }
  int64_t* get_amount() && = delete;

  int64_t& set_amount(int64_t amount_) {
    amount = amount_;
    __isset.amount = true;
    return amount;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TColumnIncrement >;
};

void swap(TColumnIncrement& a, TColumnIncrement& b);
extern template void TColumnIncrement::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TColumnIncrement::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TColumnIncrement::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TColumnIncrement::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TColumnIncrement::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TColumnIncrement::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TColumnIncrement::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TColumnIncrement::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TColumnIncrement::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TResult final : private apache::thrift::detail::st::ComparisonOperators<TResult> {
 public:

  TResult() {}
  // FragileConstructor for use in initialization lists only.
  TResult(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columnValues__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
    __isset.row = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columnValues = arg.extract();
  }

  TResult(TResult&&) = default;

  TResult(const TResult&) = default;

  TResult& operator=(TResult&&) = default;

  TResult& operator=(const TResult&) = default;
  void __clear();
  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columnValues;

  struct __isset {
    bool row;
  } __isset = {};
  bool operator==(const TResult& rhs) const;
  bool operator<(const TResult& rhs) const;

  const std::string* get_row() const& {
    return __isset.row ? std::addressof(row) : nullptr;
  }

  std::string* get_row() & {
    return __isset.row ? std::addressof(row) : nullptr;
  }
  std::string* get_row() && = delete;

  template <typename T_TResult_row_struct_setter = std::string>
  std::string& set_row(T_TResult_row_struct_setter&& row_) {
    row = std::forward<T_TResult_row_struct_setter>(row_);
    __isset.row = true;
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& get_columnValues() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> get_columnValues() &&;

  template <typename T_TResult_columnValues_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& set_columnValues(T_TResult_columnValues_struct_setter&& columnValues_) {
    columnValues = std::forward<T_TResult_columnValues_struct_setter>(columnValues_);
    return columnValues;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TResult >;
};

void swap(TResult& a, TResult& b);
extern template void TResult::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TResult::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TResult::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TResult::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TResult::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TResult::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TResult::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TResult::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TResult::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TResult* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TResult* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TResult>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TResult const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TAuthorization final : private apache::thrift::detail::st::ComparisonOperators<TAuthorization> {
 public:

  TAuthorization() {}
  // FragileConstructor for use in initialization lists only.
  TAuthorization(apache::thrift::FragileConstructor, std::vector<std::string> labels__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    labels = arg.extract();
    __isset.labels = true;
  }

  TAuthorization(TAuthorization&&) = default;

  TAuthorization(const TAuthorization&) = default;

  TAuthorization& operator=(TAuthorization&&) = default;

  TAuthorization& operator=(const TAuthorization&) = default;
  void __clear();
  std::vector<std::string> labels;

  struct __isset {
    bool labels;
  } __isset = {};
  bool operator==(const TAuthorization& rhs) const;
  bool operator<(const TAuthorization& rhs) const;
  const std::vector<std::string>* get_labels() const&;
  std::vector<std::string>* get_labels() &;
  std::vector<std::string>* get_labels() && = delete;

  template <typename T_TAuthorization_labels_struct_setter = std::vector<std::string>>
  std::vector<std::string>& set_labels(T_TAuthorization_labels_struct_setter&& labels_) {
    labels = std::forward<T_TAuthorization_labels_struct_setter>(labels_);
    __isset.labels = true;
    return labels;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TAuthorization >;
};

void swap(TAuthorization& a, TAuthorization& b);
extern template void TAuthorization::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TAuthorization::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TAuthorization::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TAuthorization::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TAuthorization::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TAuthorization::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TAuthorization::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TAuthorization::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TAuthorization::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TCellVisibility final : private apache::thrift::detail::st::ComparisonOperators<TCellVisibility> {
 public:

  TCellVisibility() {}
  // FragileConstructor for use in initialization lists only.
  TCellVisibility(apache::thrift::FragileConstructor, std::string expression__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    expression = arg.extract();
    __isset.expression = true;
  }

  TCellVisibility(TCellVisibility&&) = default;

  TCellVisibility(const TCellVisibility&) = default;

  TCellVisibility& operator=(TCellVisibility&&) = default;

  TCellVisibility& operator=(const TCellVisibility&) = default;
  void __clear();
  std::string expression;

  struct __isset {
    bool expression;
  } __isset = {};
  bool operator==(const TCellVisibility& rhs) const;
  bool operator<(const TCellVisibility& rhs) const;

  const std::string* get_expression() const& {
    return __isset.expression ? std::addressof(expression) : nullptr;
  }

  std::string* get_expression() & {
    return __isset.expression ? std::addressof(expression) : nullptr;
  }
  std::string* get_expression() && = delete;

  template <typename T_TCellVisibility_expression_struct_setter = std::string>
  std::string& set_expression(T_TCellVisibility_expression_struct_setter&& expression_) {
    expression = std::forward<T_TCellVisibility_expression_struct_setter>(expression_);
    __isset.expression = true;
    return expression;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TCellVisibility >;
};

void swap(TCellVisibility& a, TCellVisibility& b);
extern template void TCellVisibility::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TCellVisibility::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TCellVisibility::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TCellVisibility::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TCellVisibility::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TCellVisibility::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TCellVisibility::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TCellVisibility::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TCellVisibility::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TGet final : private apache::thrift::detail::st::ComparisonOperators<TGet> {
 public:

  TGet();

  // FragileConstructor for use in initialization lists only.
  TGet(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns__arg, int64_t timestamp__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange timeRange__arg, int32_t maxVersions__arg, std::string filterString__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization authorizations__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columns = arg.extract();
    __isset.columns = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    timestamp = arg.extract();
    __isset.timestamp = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    timeRange = arg.extract();
    __isset.timeRange = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    maxVersions = arg.extract();
    __isset.maxVersions = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    filterString = arg.extract();
    __isset.filterString = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<8, _T> arg) {
    authorizations = arg.extract();
    __isset.authorizations = true;
  }

  TGet(TGet&&) = default;

  TGet(const TGet&) = default;

  TGet& operator=(TGet&&) = default;

  TGet& operator=(const TGet&) = default;
  void __clear();

  ~TGet();

  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns;
  int64_t timestamp;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange timeRange;
  int32_t maxVersions;
  std::string filterString;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization authorizations;

  struct __isset {
    bool columns;
    bool timestamp;
    bool timeRange;
    bool maxVersions;
    bool filterString;
    bool attributes;
    bool authorizations;
  } __isset = {};
  bool operator==(const TGet& rhs) const;
  bool operator<(const TGet& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TGet_row_struct_setter = std::string>
  std::string& set_row(T_TGet_row_struct_setter&& row_) {
    row = std::forward<T_TGet_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() &;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() && = delete;

  template <typename T_TGet_columns_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>& set_columns(T_TGet_columns_struct_setter&& columns_) {
    columns = std::forward<T_TGet_columns_struct_setter>(columns_);
    __isset.columns = true;
    return columns;
  }

  const int64_t* get_timestamp() const& {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }

  int64_t* get_timestamp() & {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }
  int64_t* get_timestamp() && = delete;

  int64_t& set_timestamp(int64_t timestamp_) {
    timestamp = timestamp_;
    __isset.timestamp = true;
    return timestamp;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() && = delete;

  template <typename T_TGet_timeRange_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange& set_timeRange(T_TGet_timeRange_struct_setter&& timeRange_) {
    timeRange = std::forward<T_TGet_timeRange_struct_setter>(timeRange_);
    __isset.timeRange = true;
    return timeRange;
  }

  const int32_t* get_maxVersions() const& {
    return __isset.maxVersions ? std::addressof(maxVersions) : nullptr;
  }

  int32_t* get_maxVersions() & {
    return __isset.maxVersions ? std::addressof(maxVersions) : nullptr;
  }
  int32_t* get_maxVersions() && = delete;

  int32_t& set_maxVersions(int32_t maxVersions_) {
    maxVersions = maxVersions_;
    __isset.maxVersions = true;
    return maxVersions;
  }

  const std::string* get_filterString() const& {
    return __isset.filterString ? std::addressof(filterString) : nullptr;
  }

  std::string* get_filterString() & {
    return __isset.filterString ? std::addressof(filterString) : nullptr;
  }
  std::string* get_filterString() && = delete;

  template <typename T_TGet_filterString_struct_setter = std::string>
  std::string& set_filterString(T_TGet_filterString_struct_setter&& filterString_) {
    filterString = std::forward<T_TGet_filterString_struct_setter>(filterString_);
    __isset.filterString = true;
    return filterString;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TGet_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TGet_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TGet_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() && = delete;

  template <typename T_TGet_authorizations_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization& set_authorizations(T_TGet_authorizations_struct_setter&& authorizations_) {
    authorizations = std::forward<T_TGet_authorizations_struct_setter>(authorizations_);
    __isset.authorizations = true;
    return authorizations;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TGet >;
};

void swap(TGet& a, TGet& b);
extern template void TGet::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TGet::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TGet::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TGet::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TGet::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TGet::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TGet::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TGet::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TGet::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TGet* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TGet const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TGet* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TGet const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TGet>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TGet const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TPut final : private apache::thrift::detail::st::ComparisonOperators<TPut> {
 public:

  TPut();

  // FragileConstructor for use in initialization lists only.
  TPut(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columnValues__arg, int64_t timestamp__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columnValues = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    timestamp = arg.extract();
    __isset.timestamp = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    durability = arg.extract();
    __isset.durability = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    cellVisibility = arg.extract();
    __isset.cellVisibility = true;
  }

  TPut(TPut&&) = default;

  TPut(const TPut&) = default;

  TPut& operator=(TPut&&) = default;

  TPut& operator=(const TPut&) = default;
  void __clear();

  ~TPut();

  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columnValues;
  int64_t timestamp;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility;

  struct __isset {
    bool timestamp;
    bool attributes;
    bool durability;
    bool cellVisibility;
  } __isset = {};
  bool operator==(const TPut& rhs) const;
  bool operator<(const TPut& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TPut_row_struct_setter = std::string>
  std::string& set_row(T_TPut_row_struct_setter&& row_) {
    row = std::forward<T_TPut_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& get_columnValues() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> get_columnValues() &&;

  template <typename T_TPut_columnValues_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& set_columnValues(T_TPut_columnValues_struct_setter&& columnValues_) {
    columnValues = std::forward<T_TPut_columnValues_struct_setter>(columnValues_);
    return columnValues;
  }

  const int64_t* get_timestamp() const& {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }

  int64_t* get_timestamp() & {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }
  int64_t* get_timestamp() && = delete;

  int64_t& set_timestamp(int64_t timestamp_) {
    timestamp = timestamp_;
    __isset.timestamp = true;
    return timestamp;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TPut_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TPut_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TPut_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }

  const  ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() const& {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() & {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() && = delete;

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability& set_durability( ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability_) {
    durability = durability_;
    __isset.durability = true;
    return durability;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() && = delete;

  template <typename T_TPut_cellVisibility_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility& set_cellVisibility(T_TPut_cellVisibility_struct_setter&& cellVisibility_) {
    cellVisibility = std::forward<T_TPut_cellVisibility_struct_setter>(cellVisibility_);
    __isset.cellVisibility = true;
    return cellVisibility;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TPut >;
};

void swap(TPut& a, TPut& b);
extern template void TPut::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TPut::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TPut::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TPut::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TPut::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TPut::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TPut::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TPut::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TPut::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TPut* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TPut const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TPut* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TPut const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TPut>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TPut const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TDelete final : private apache::thrift::detail::st::ComparisonOperators<TDelete> {
 public:

  TDelete();

  // FragileConstructor for use in initialization lists only.
  TDelete(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns__arg, int64_t timestamp__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType deleteType__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columns = arg.extract();
    __isset.columns = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    timestamp = arg.extract();
    __isset.timestamp = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    deleteType = arg.extract();
    __isset.deleteType = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    durability = arg.extract();
    __isset.durability = true;
  }

  TDelete(TDelete&&) = default;

  TDelete(const TDelete&) = default;

  TDelete& operator=(TDelete&&) = default;

  TDelete& operator=(const TDelete&) = default;
  void __clear();

  ~TDelete();

  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns;
  int64_t timestamp;
   ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType deleteType;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability;

  struct __isset {
    bool columns;
    bool timestamp;
    bool deleteType;
    bool attributes;
    bool durability;
  } __isset = {};
  bool operator==(const TDelete& rhs) const;
  bool operator<(const TDelete& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TDelete_row_struct_setter = std::string>
  std::string& set_row(T_TDelete_row_struct_setter&& row_) {
    row = std::forward<T_TDelete_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() &;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() && = delete;

  template <typename T_TDelete_columns_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>& set_columns(T_TDelete_columns_struct_setter&& columns_) {
    columns = std::forward<T_TDelete_columns_struct_setter>(columns_);
    __isset.columns = true;
    return columns;
  }

  const int64_t* get_timestamp() const& {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }

  int64_t* get_timestamp() & {
    return __isset.timestamp ? std::addressof(timestamp) : nullptr;
  }
  int64_t* get_timestamp() && = delete;

  int64_t& set_timestamp(int64_t timestamp_) {
    timestamp = timestamp_;
    __isset.timestamp = true;
    return timestamp;
  }

  const  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType* get_deleteType() const& {
    return __isset.deleteType ? std::addressof(deleteType) : nullptr;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType* get_deleteType() & {
    return __isset.deleteType ? std::addressof(deleteType) : nullptr;
  }
   ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType* get_deleteType() && = delete;

   ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType& set_deleteType( ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType deleteType_) {
    deleteType = deleteType_;
    __isset.deleteType = true;
    return deleteType;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TDelete_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TDelete_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TDelete_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }

  const  ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() const& {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() & {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() && = delete;

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability& set_durability( ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability_) {
    durability = durability_;
    __isset.durability = true;
    return durability;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TDelete >;
};

void swap(TDelete& a, TDelete& b);
extern template void TDelete::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TDelete::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TDelete::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TDelete::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TDelete::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TDelete::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TDelete::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TDelete::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TDelete::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TDelete* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TDelete const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TIncrement final : private apache::thrift::detail::st::ComparisonOperators<TIncrement> {
 public:

  TIncrement();

  // FragileConstructor for use in initialization lists only.
  TIncrement(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement> columns__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columns = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    durability = arg.extract();
    __isset.durability = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    cellVisibility = arg.extract();
    __isset.cellVisibility = true;
  }

  TIncrement(TIncrement&&) = default;

  TIncrement(const TIncrement&) = default;

  TIncrement& operator=(TIncrement&&) = default;

  TIncrement& operator=(const TIncrement&) = default;
  void __clear();

  ~TIncrement();

  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement> columns;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility;

  struct __isset {
    bool attributes;
    bool durability;
    bool cellVisibility;
  } __isset = {};
  bool operator==(const TIncrement& rhs) const;
  bool operator<(const TIncrement& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TIncrement_row_struct_setter = std::string>
  std::string& set_row(T_TIncrement_row_struct_setter&& row_) {
    row = std::forward<T_TIncrement_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>& get_columns() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement> get_columns() &&;

  template <typename T_TIncrement_columns_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>& set_columns(T_TIncrement_columns_struct_setter&& columns_) {
    columns = std::forward<T_TIncrement_columns_struct_setter>(columns_);
    return columns;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TIncrement_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TIncrement_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TIncrement_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }

  const  ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() const& {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() & {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() && = delete;

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability& set_durability( ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability_) {
    durability = durability_;
    __isset.durability = true;
    return durability;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() && = delete;

  template <typename T_TIncrement_cellVisibility_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility& set_cellVisibility(T_TIncrement_cellVisibility_struct_setter&& cellVisibility_) {
    cellVisibility = std::forward<T_TIncrement_cellVisibility_struct_setter>(cellVisibility_);
    __isset.cellVisibility = true;
    return cellVisibility;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TIncrement >;
};

void swap(TIncrement& a, TIncrement& b);
extern template void TIncrement::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TIncrement::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TIncrement::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TIncrement::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TIncrement::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TIncrement::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TIncrement::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TIncrement::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TIncrement::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TIncrement* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TAppend final : private apache::thrift::detail::st::ComparisonOperators<TAppend> {
 public:

  TAppend();

  // FragileConstructor for use in initialization lists only.
  TAppend(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columns__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    columns = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    durability = arg.extract();
    __isset.durability = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    cellVisibility = arg.extract();
    __isset.cellVisibility = true;
  }

  TAppend(TAppend&&) = default;

  TAppend(const TAppend&) = default;

  TAppend& operator=(TAppend&&) = default;

  TAppend& operator=(const TAppend&) = default;
  void __clear();

  ~TAppend();

  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> columns;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility cellVisibility;

  struct __isset {
    bool attributes;
    bool durability;
    bool cellVisibility;
  } __isset = {};
  bool operator==(const TAppend& rhs) const;
  bool operator<(const TAppend& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TAppend_row_struct_setter = std::string>
  std::string& set_row(T_TAppend_row_struct_setter&& row_) {
    row = std::forward<T_TAppend_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& get_columns() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> get_columns() &&;

  template <typename T_TAppend_columns_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>& set_columns(T_TAppend_columns_struct_setter&& columns_) {
    columns = std::forward<T_TAppend_columns_struct_setter>(columns_);
    return columns;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TAppend_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TAppend_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TAppend_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }

  const  ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() const& {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() & {
    return __isset.durability ? std::addressof(durability) : nullptr;
  }
   ::apache::hadoop::hbase::thrift2::cpp2::TDurability* get_durability() && = delete;

   ::apache::hadoop::hbase::thrift2::cpp2::TDurability& set_durability( ::apache::hadoop::hbase::thrift2::cpp2::TDurability durability_) {
    durability = durability_;
    __isset.durability = true;
    return durability;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility* get_cellVisibility() && = delete;

  template <typename T_TAppend_cellVisibility_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>
   ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility& set_cellVisibility(T_TAppend_cellVisibility_struct_setter&& cellVisibility_) {
    cellVisibility = std::forward<T_TAppend_cellVisibility_struct_setter>(cellVisibility_);
    __isset.cellVisibility = true;
    return cellVisibility;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TAppend >;
};

void swap(TAppend& a, TAppend& b);
extern template void TAppend::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TAppend::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TAppend::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TAppend::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TAppend::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TAppend::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TAppend::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TAppend::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TAppend::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TAppend* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAppend const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAppend* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAppend const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TAppend>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TAppend const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TScan final : private apache::thrift::detail::st::ComparisonOperators<TScan> {
 public:

  TScan();

  // FragileConstructor for use in initialization lists only.
  TScan(apache::thrift::FragileConstructor, std::string startRow__arg, std::string stopRow__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns__arg, int32_t caching__arg, int32_t maxVersions__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange timeRange__arg, std::string filterString__arg, int32_t batchSize__arg, std::map<std::string, std::string> attributes__arg,  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization authorizations__arg, bool reversed__arg, bool cacheBlocks__arg, std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange> colFamTimeRangeMap__arg, bool small__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    startRow = arg.extract();
    __isset.startRow = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    stopRow = arg.extract();
    __isset.stopRow = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    columns = arg.extract();
    __isset.columns = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    caching = arg.extract();
    __isset.caching = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    maxVersions = arg.extract();
    __isset.maxVersions = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    timeRange = arg.extract();
    __isset.timeRange = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    filterString = arg.extract();
    __isset.filterString = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<8, _T> arg) {
    batchSize = arg.extract();
    __isset.batchSize = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<9, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<10, _T> arg) {
    authorizations = arg.extract();
    __isset.authorizations = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<11, _T> arg) {
    reversed = arg.extract();
    __isset.reversed = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<12, _T> arg) {
    cacheBlocks = arg.extract();
    __isset.cacheBlocks = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<13, _T> arg) {
    colFamTimeRangeMap = arg.extract();
    __isset.colFamTimeRangeMap = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<14, _T> arg) {
    small = arg.extract();
    __isset.small = true;
  }

  TScan(TScan&&) = default;

  TScan(const TScan&) = default;

  TScan& operator=(TScan&&) = default;

  TScan& operator=(const TScan&) = default;
  void __clear();

  ~TScan();

  std::string startRow;
  std::string stopRow;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> columns;
  int32_t caching;
  int32_t maxVersions;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange timeRange;
  std::string filterString;
  int32_t batchSize;
  std::map<std::string, std::string> attributes;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization authorizations;
  bool reversed;
  bool cacheBlocks;
  std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange> colFamTimeRangeMap;
  bool small;

  struct __isset {
    bool startRow;
    bool stopRow;
    bool columns;
    bool caching;
    bool maxVersions;
    bool timeRange;
    bool filterString;
    bool batchSize;
    bool attributes;
    bool authorizations;
    bool reversed;
    bool cacheBlocks;
    bool colFamTimeRangeMap;
    bool small;
  } __isset = {};
  bool operator==(const TScan& rhs) const;
  bool operator<(const TScan& rhs) const;

  const std::string* get_startRow() const& {
    return __isset.startRow ? std::addressof(startRow) : nullptr;
  }

  std::string* get_startRow() & {
    return __isset.startRow ? std::addressof(startRow) : nullptr;
  }
  std::string* get_startRow() && = delete;

  template <typename T_TScan_startRow_struct_setter = std::string>
  std::string& set_startRow(T_TScan_startRow_struct_setter&& startRow_) {
    startRow = std::forward<T_TScan_startRow_struct_setter>(startRow_);
    __isset.startRow = true;
    return startRow;
  }

  const std::string* get_stopRow() const& {
    return __isset.stopRow ? std::addressof(stopRow) : nullptr;
  }

  std::string* get_stopRow() & {
    return __isset.stopRow ? std::addressof(stopRow) : nullptr;
  }
  std::string* get_stopRow() && = delete;

  template <typename T_TScan_stopRow_struct_setter = std::string>
  std::string& set_stopRow(T_TScan_stopRow_struct_setter&& stopRow_) {
    stopRow = std::forward<T_TScan_stopRow_struct_setter>(stopRow_);
    __isset.stopRow = true;
    return stopRow;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() &;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>* get_columns() && = delete;

  template <typename T_TScan_columns_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>& set_columns(T_TScan_columns_struct_setter&& columns_) {
    columns = std::forward<T_TScan_columns_struct_setter>(columns_);
    __isset.columns = true;
    return columns;
  }

  const int32_t* get_caching() const& {
    return __isset.caching ? std::addressof(caching) : nullptr;
  }

  int32_t* get_caching() & {
    return __isset.caching ? std::addressof(caching) : nullptr;
  }
  int32_t* get_caching() && = delete;

  int32_t& set_caching(int32_t caching_) {
    caching = caching_;
    __isset.caching = true;
    return caching;
  }

  const int32_t* get_maxVersions() const& {
    return __isset.maxVersions ? std::addressof(maxVersions) : nullptr;
  }

  int32_t* get_maxVersions() & {
    return __isset.maxVersions ? std::addressof(maxVersions) : nullptr;
  }
  int32_t* get_maxVersions() && = delete;

  int32_t& set_maxVersions(int32_t maxVersions_) {
    maxVersions = maxVersions_;
    __isset.maxVersions = true;
    return maxVersions;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange* get_timeRange() && = delete;

  template <typename T_TScan_timeRange_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>
   ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange& set_timeRange(T_TScan_timeRange_struct_setter&& timeRange_) {
    timeRange = std::forward<T_TScan_timeRange_struct_setter>(timeRange_);
    __isset.timeRange = true;
    return timeRange;
  }

  const std::string* get_filterString() const& {
    return __isset.filterString ? std::addressof(filterString) : nullptr;
  }

  std::string* get_filterString() & {
    return __isset.filterString ? std::addressof(filterString) : nullptr;
  }
  std::string* get_filterString() && = delete;

  template <typename T_TScan_filterString_struct_setter = std::string>
  std::string& set_filterString(T_TScan_filterString_struct_setter&& filterString_) {
    filterString = std::forward<T_TScan_filterString_struct_setter>(filterString_);
    __isset.filterString = true;
    return filterString;
  }

  const int32_t* get_batchSize() const& {
    return __isset.batchSize ? std::addressof(batchSize) : nullptr;
  }

  int32_t* get_batchSize() & {
    return __isset.batchSize ? std::addressof(batchSize) : nullptr;
  }
  int32_t* get_batchSize() && = delete;

  int32_t& set_batchSize(int32_t batchSize_) {
    batchSize = batchSize_;
    __isset.batchSize = true;
    return batchSize;
  }
  const std::map<std::string, std::string>* get_attributes() const&;
  std::map<std::string, std::string>* get_attributes() &;
  std::map<std::string, std::string>* get_attributes() && = delete;

  template <typename T_TScan_attributes_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_attributes(T_TScan_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_TScan_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() &;
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization* get_authorizations() && = delete;

  template <typename T_TScan_authorizations_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>
   ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization& set_authorizations(T_TScan_authorizations_struct_setter&& authorizations_) {
    authorizations = std::forward<T_TScan_authorizations_struct_setter>(authorizations_);
    __isset.authorizations = true;
    return authorizations;
  }

  const bool* get_reversed() const& {
    return __isset.reversed ? std::addressof(reversed) : nullptr;
  }

  bool* get_reversed() & {
    return __isset.reversed ? std::addressof(reversed) : nullptr;
  }
  bool* get_reversed() && = delete;

  bool& set_reversed(bool reversed_) {
    reversed = reversed_;
    __isset.reversed = true;
    return reversed;
  }

  const bool* get_cacheBlocks() const& {
    return __isset.cacheBlocks ? std::addressof(cacheBlocks) : nullptr;
  }

  bool* get_cacheBlocks() & {
    return __isset.cacheBlocks ? std::addressof(cacheBlocks) : nullptr;
  }
  bool* get_cacheBlocks() && = delete;

  bool& set_cacheBlocks(bool cacheBlocks_) {
    cacheBlocks = cacheBlocks_;
    __isset.cacheBlocks = true;
    return cacheBlocks;
  }
  const std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>* get_colFamTimeRangeMap() const&;
  std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>* get_colFamTimeRangeMap() &;
  std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>* get_colFamTimeRangeMap() && = delete;

  template <typename T_TScan_colFamTimeRangeMap_struct_setter = std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>>
  std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>& set_colFamTimeRangeMap(T_TScan_colFamTimeRangeMap_struct_setter&& colFamTimeRangeMap_) {
    colFamTimeRangeMap = std::forward<T_TScan_colFamTimeRangeMap_struct_setter>(colFamTimeRangeMap_);
    __isset.colFamTimeRangeMap = true;
    return colFamTimeRangeMap;
  }

  const bool* get_small() const& {
    return __isset.small ? std::addressof(small) : nullptr;
  }

  bool* get_small() & {
    return __isset.small ? std::addressof(small) : nullptr;
  }
  bool* get_small() && = delete;

  bool& set_small(bool small_) {
    small = small_;
    __isset.small = true;
    return small;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TScan >;
};

void swap(TScan& a, TScan& b);
extern template void TScan::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TScan::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TScan::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TScan::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TScan::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TScan::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TScan::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TScan::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TScan::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TScan* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TScan const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TScan* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TScan const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TScan>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TScan const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TMutation final : private apache::thrift::detail::st::ComparisonOperators<TMutation> {
 public:
  enum Type {
    __EMPTY__ = 0,
    put = 1,
    deleteSingle = 2,
  } ;

  TMutation()
      : type_(Type::__EMPTY__) {}

  TMutation(TMutation&& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::put:
      {
        set_put(std::move(rhs.value_.put));
        break;
      }
      case Type::deleteSingle:
      {
        set_deleteSingle(std::move(rhs.value_.deleteSingle));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  TMutation(const TMutation& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::put:
      {
        set_put(rhs.value_.put);
        break;
      }
      case Type::deleteSingle:
      {
        set_deleteSingle(rhs.value_.deleteSingle);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  TMutation& operator=(TMutation&& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::put:
      {
        set_put(std::move(rhs.value_.put));
        break;
      }
      case Type::deleteSingle:
      {
        set_deleteSingle(std::move(rhs.value_.deleteSingle));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  TMutation& operator=(const TMutation& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::put:
      {
        set_put(rhs.value_.put);
        break;
      }
      case Type::deleteSingle:
      {
        set_deleteSingle(rhs.value_.deleteSingle);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    set_put(arg.extract());
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    set_deleteSingle(arg.extract());
  }
  void __clear();

  ~TMutation() {
    __clear();
  }
  union storage_type {
     ::apache::hadoop::hbase::thrift2::cpp2::TPut put;
     ::apache::hadoop::hbase::thrift2::cpp2::TDelete deleteSingle;

    storage_type() {}
    ~storage_type() {}
  } ;
  bool operator==(const TMutation& rhs) const;

  bool operator < (const TMutation& rhs) const {
    if (type_ != rhs.type_) { return type_ < rhs.type_; }
    switch(type_) {
      case Type::put:
      {
        return value_.put < rhs.value_.put;
      }
      case Type::deleteSingle:
      {
        return value_.deleteSingle < rhs.value_.deleteSingle;
      }
      default:
      {
        return false;
      }
    }
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TPut& set_put( ::apache::hadoop::hbase::thrift2::cpp2::TPut const &t) {
    __clear();
    type_ = Type::put;
    ::new (std::addressof(value_.put))  ::apache::hadoop::hbase::thrift2::cpp2::TPut(t);
    return value_.put;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TPut& set_put( ::apache::hadoop::hbase::thrift2::cpp2::TPut&& t) {
    __clear();
    type_ = Type::put;
    ::new (std::addressof(value_.put))  ::apache::hadoop::hbase::thrift2::cpp2::TPut(std::move(t));
    return value_.put;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::apache::hadoop::hbase::thrift2::cpp2::TPut, T...>>  ::apache::hadoop::hbase::thrift2::cpp2::TPut& set_put(T&&... t) {
    __clear();
    type_ = Type::put;
    ::new (std::addressof(value_.put))  ::apache::hadoop::hbase::thrift2::cpp2::TPut(std::forward<T>(t)...);
    return value_.put;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDelete& set_deleteSingle( ::apache::hadoop::hbase::thrift2::cpp2::TDelete const &t) {
    __clear();
    type_ = Type::deleteSingle;
    ::new (std::addressof(value_.deleteSingle))  ::apache::hadoop::hbase::thrift2::cpp2::TDelete(t);
    return value_.deleteSingle;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDelete& set_deleteSingle( ::apache::hadoop::hbase::thrift2::cpp2::TDelete&& t) {
    __clear();
    type_ = Type::deleteSingle;
    ::new (std::addressof(value_.deleteSingle))  ::apache::hadoop::hbase::thrift2::cpp2::TDelete(std::move(t));
    return value_.deleteSingle;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t< ::apache::hadoop::hbase::thrift2::cpp2::TDelete, T...>>  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& set_deleteSingle(T&&... t) {
    __clear();
    type_ = Type::deleteSingle;
    ::new (std::addressof(value_.deleteSingle))  ::apache::hadoop::hbase::thrift2::cpp2::TDelete(std::forward<T>(t)...);
    return value_.deleteSingle;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TPut const & get_put() const {
    assert(type_ == Type::put);
    return value_.put;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDelete const & get_deleteSingle() const {
    assert(type_ == Type::deleteSingle);
    return value_.deleteSingle;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TPut & mutable_put() {
    assert(type_ == Type::put);
    return value_.put;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDelete & mutable_deleteSingle() {
    assert(type_ == Type::deleteSingle);
    return value_.deleteSingle;
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TPut move_put() {
    assert(type_ == Type::put);
    return std::move(value_.put);
  }

   ::apache::hadoop::hbase::thrift2::cpp2::TDelete move_deleteSingle() {
    assert(type_ == Type::deleteSingle);
    return std::move(value_.deleteSingle);
  }

  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TMutation >;
};

void swap(TMutation& a, TMutation& b);
extern template void TMutation::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TMutation::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TMutation::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TMutation::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TMutation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TMutation::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TMutation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TMutation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TMutation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TMutation* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TMutation const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TMutation* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TMutation const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TMutation const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TRowMutations final : private apache::thrift::detail::st::ComparisonOperators<TRowMutations> {
 public:

  TRowMutations() {}
  // FragileConstructor for use in initialization lists only.
  TRowMutations(apache::thrift::FragileConstructor, std::string row__arg, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation> mutations__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    row = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    mutations = arg.extract();
  }

  TRowMutations(TRowMutations&&) = default;

  TRowMutations(const TRowMutations&) = default;

  TRowMutations& operator=(TRowMutations&&) = default;

  TRowMutations& operator=(const TRowMutations&) = default;
  void __clear();
  std::string row;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation> mutations;
  bool operator==(const TRowMutations& rhs) const;
  bool operator<(const TRowMutations& rhs) const;

  const std::string& get_row() const& {
    return row;
  }

  std::string get_row() && {
    return std::move(row);
  }

  template <typename T_TRowMutations_row_struct_setter = std::string>
  std::string& set_row(T_TRowMutations_row_struct_setter&& row_) {
    row = std::forward<T_TRowMutations_row_struct_setter>(row_);
    return row;
  }
  const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>& get_mutations() const&;
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation> get_mutations() &&;

  template <typename T_TRowMutations_mutations_struct_setter = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>>
  std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>& set_mutations(T_TRowMutations_mutations_struct_setter&& mutations_) {
    mutations = std::forward<T_TRowMutations_mutations_struct_setter>(mutations_);
    return mutations;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TRowMutations >;
};

void swap(TRowMutations& a, TRowMutations& b);
extern template void TRowMutations::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TRowMutations::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TRowMutations::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TRowMutations::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TRowMutations::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TRowMutations::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TRowMutations::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TRowMutations::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TRowMutations::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class THRegionInfo final : private apache::thrift::detail::st::ComparisonOperators<THRegionInfo> {
 public:

  THRegionInfo();

  // FragileConstructor for use in initialization lists only.
  THRegionInfo(apache::thrift::FragileConstructor, int64_t regionId__arg, std::string tableName__arg, std::string startKey__arg, std::string endKey__arg, bool offline__arg, bool split__arg, int32_t replicaId__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    regionId = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    tableName = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    startKey = arg.extract();
    __isset.startKey = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    endKey = arg.extract();
    __isset.endKey = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    offline = arg.extract();
    __isset.offline = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    split = arg.extract();
    __isset.split = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    replicaId = arg.extract();
    __isset.replicaId = true;
  }

  THRegionInfo(THRegionInfo&&) = default;

  THRegionInfo(const THRegionInfo&) = default;

  THRegionInfo& operator=(THRegionInfo&&) = default;

  THRegionInfo& operator=(const THRegionInfo&) = default;
  void __clear();

  ~THRegionInfo();

  int64_t regionId;
  std::string tableName;
  std::string startKey;
  std::string endKey;
  bool offline;
  bool split;
  int32_t replicaId;

  struct __isset {
    bool startKey;
    bool endKey;
    bool offline;
    bool split;
    bool replicaId;
  } __isset = {};
  bool operator==(const THRegionInfo& rhs) const;
  bool operator<(const THRegionInfo& rhs) const;

  int64_t get_regionId() const {
    return regionId;
  }

  int64_t& set_regionId(int64_t regionId_) {
    regionId = regionId_;
    return regionId;
  }

  const std::string& get_tableName() const& {
    return tableName;
  }

  std::string get_tableName() && {
    return std::move(tableName);
  }

  template <typename T_THRegionInfo_tableName_struct_setter = std::string>
  std::string& set_tableName(T_THRegionInfo_tableName_struct_setter&& tableName_) {
    tableName = std::forward<T_THRegionInfo_tableName_struct_setter>(tableName_);
    return tableName;
  }

  const std::string* get_startKey() const& {
    return __isset.startKey ? std::addressof(startKey) : nullptr;
  }

  std::string* get_startKey() & {
    return __isset.startKey ? std::addressof(startKey) : nullptr;
  }
  std::string* get_startKey() && = delete;

  template <typename T_THRegionInfo_startKey_struct_setter = std::string>
  std::string& set_startKey(T_THRegionInfo_startKey_struct_setter&& startKey_) {
    startKey = std::forward<T_THRegionInfo_startKey_struct_setter>(startKey_);
    __isset.startKey = true;
    return startKey;
  }

  const std::string* get_endKey() const& {
    return __isset.endKey ? std::addressof(endKey) : nullptr;
  }

  std::string* get_endKey() & {
    return __isset.endKey ? std::addressof(endKey) : nullptr;
  }
  std::string* get_endKey() && = delete;

  template <typename T_THRegionInfo_endKey_struct_setter = std::string>
  std::string& set_endKey(T_THRegionInfo_endKey_struct_setter&& endKey_) {
    endKey = std::forward<T_THRegionInfo_endKey_struct_setter>(endKey_);
    __isset.endKey = true;
    return endKey;
  }

  const bool* get_offline() const& {
    return __isset.offline ? std::addressof(offline) : nullptr;
  }

  bool* get_offline() & {
    return __isset.offline ? std::addressof(offline) : nullptr;
  }
  bool* get_offline() && = delete;

  bool& set_offline(bool offline_) {
    offline = offline_;
    __isset.offline = true;
    return offline;
  }

  const bool* get_split() const& {
    return __isset.split ? std::addressof(split) : nullptr;
  }

  bool* get_split() & {
    return __isset.split ? std::addressof(split) : nullptr;
  }
  bool* get_split() && = delete;

  bool& set_split(bool split_) {
    split = split_;
    __isset.split = true;
    return split;
  }

  const int32_t* get_replicaId() const& {
    return __isset.replicaId ? std::addressof(replicaId) : nullptr;
  }

  int32_t* get_replicaId() & {
    return __isset.replicaId ? std::addressof(replicaId) : nullptr;
  }
  int32_t* get_replicaId() && = delete;

  int32_t& set_replicaId(int32_t replicaId_) {
    replicaId = replicaId_;
    __isset.replicaId = true;
    return replicaId;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< THRegionInfo >;
};

void swap(THRegionInfo& a, THRegionInfo& b);
extern template void THRegionInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t THRegionInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t THRegionInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t THRegionInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void THRegionInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t THRegionInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t THRegionInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t THRegionInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t THRegionInfo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::clear( ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TServerName final : private apache::thrift::detail::st::ComparisonOperators<TServerName> {
 public:

  TServerName() :
      port(0),
      startCode(0) {}
  // FragileConstructor for use in initialization lists only.
  TServerName(apache::thrift::FragileConstructor, std::string hostName__arg, int32_t port__arg, int64_t startCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    hostName = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    port = arg.extract();
    __isset.port = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    startCode = arg.extract();
    __isset.startCode = true;
  }

  TServerName(TServerName&&) = default;

  TServerName(const TServerName&) = default;

  TServerName& operator=(TServerName&&) = default;

  TServerName& operator=(const TServerName&) = default;
  void __clear();
  std::string hostName;
  int32_t port;
  int64_t startCode;

  struct __isset {
    bool port;
    bool startCode;
  } __isset = {};
  bool operator==(const TServerName& rhs) const;
  bool operator<(const TServerName& rhs) const;

  const std::string& get_hostName() const& {
    return hostName;
  }

  std::string get_hostName() && {
    return std::move(hostName);
  }

  template <typename T_TServerName_hostName_struct_setter = std::string>
  std::string& set_hostName(T_TServerName_hostName_struct_setter&& hostName_) {
    hostName = std::forward<T_TServerName_hostName_struct_setter>(hostName_);
    return hostName;
  }

  const int32_t* get_port() const& {
    return __isset.port ? std::addressof(port) : nullptr;
  }

  int32_t* get_port() & {
    return __isset.port ? std::addressof(port) : nullptr;
  }
  int32_t* get_port() && = delete;

  int32_t& set_port(int32_t port_) {
    port = port_;
    __isset.port = true;
    return port;
  }

  const int64_t* get_startCode() const& {
    return __isset.startCode ? std::addressof(startCode) : nullptr;
  }

  int64_t* get_startCode() & {
    return __isset.startCode ? std::addressof(startCode) : nullptr;
  }
  int64_t* get_startCode() && = delete;

  int64_t& set_startCode(int64_t startCode_) {
    startCode = startCode_;
    __isset.startCode = true;
    return startCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TServerName >;
};

void swap(TServerName& a, TServerName& b);
extern template void TServerName::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TServerName::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TServerName::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TServerName::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TServerName::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TServerName::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TServerName::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TServerName::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TServerName::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TServerName* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TServerName const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TServerName* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TServerName const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TServerName const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class THRegionLocation final : private apache::thrift::detail::st::ComparisonOperators<THRegionLocation> {
 public:

  THRegionLocation() {}
  // FragileConstructor for use in initialization lists only.
  THRegionLocation(apache::thrift::FragileConstructor,  ::apache::hadoop::hbase::thrift2::cpp2::TServerName serverName__arg,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo regionInfo__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    serverName = arg.extract();
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    regionInfo = arg.extract();
  }

  THRegionLocation(THRegionLocation&&) = default;

  THRegionLocation(const THRegionLocation&) = default;

  THRegionLocation& operator=(THRegionLocation&&) = default;

  THRegionLocation& operator=(const THRegionLocation&) = default;
  void __clear();
   ::apache::hadoop::hbase::thrift2::cpp2::TServerName serverName;
   ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo regionInfo;
  bool operator==(const THRegionLocation& rhs) const;
  bool operator<(const THRegionLocation& rhs) const;
  const  ::apache::hadoop::hbase::thrift2::cpp2::TServerName& get_serverName() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::TServerName get_serverName() &&;

  template <typename T_THRegionLocation_serverName_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::TServerName>
   ::apache::hadoop::hbase::thrift2::cpp2::TServerName& set_serverName(T_THRegionLocation_serverName_struct_setter&& serverName_) {
    serverName = std::forward<T_THRegionLocation_serverName_struct_setter>(serverName_);
    return serverName;
  }
  const  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo& get_regionInfo() const&;
   ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo get_regionInfo() &&;

  template <typename T_THRegionLocation_regionInfo_struct_setter =  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>
   ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo& set_regionInfo(T_THRegionLocation_regionInfo_struct_setter&& regionInfo_) {
    regionInfo = std::forward<T_THRegionLocation_regionInfo_struct_setter>(regionInfo_);
    return regionInfo;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< THRegionLocation >;
};

void swap(THRegionLocation& a, THRegionLocation& b);
extern template void THRegionLocation::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t THRegionLocation::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t THRegionLocation::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t THRegionLocation::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void THRegionLocation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t THRegionLocation::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t THRegionLocation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t THRegionLocation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t THRegionLocation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::clear( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TIOError final : private apache::thrift::detail::st::ComparisonOperators<TIOError>, public apache::thrift::TException {
 public:

  TIOError() {}
  // FragileConstructor for use in initialization lists only.
  TIOError(apache::thrift::FragileConstructor, std::string message__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }

  TIOError(TIOError&&) = default;

  TIOError(const TIOError&) = default;

  TIOError& operator=(TIOError&&) = default;

  TIOError& operator=(const TIOError&) = default;
  void __clear();
  std::string message;

  struct __isset {
    bool message;
  } __isset = {};
  bool operator==(const TIOError& rhs) const;
  bool operator<(const TIOError& rhs) const;

  const std::string* get_message() const& {
    return __isset.message ? std::addressof(message) : nullptr;
  }

  std::string* get_message() & {
    return __isset.message ? std::addressof(message) : nullptr;
  }
  std::string* get_message() && = delete;

  template <typename T_TIOError_message_struct_setter = std::string>
  std::string& set_message(T_TIOError_message_struct_setter&& message_) {
    message = std::forward<T_TIOError_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return " ::apache::hadoop::hbase::thrift2::cpp2::TIOError";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TIOError >;
};

void swap(TIOError& a, TIOError& b);
extern template void TIOError::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TIOError::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TIOError::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TIOError::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TIOError::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TIOError::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TIOError::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TIOError::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TIOError::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TIOError* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIOError>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIOError const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {
class TIllegalArgument final : private apache::thrift::detail::st::ComparisonOperators<TIllegalArgument>, public apache::thrift::TException {
 public:

  TIllegalArgument() {}
  // FragileConstructor for use in initialization lists only.
  TIllegalArgument(apache::thrift::FragileConstructor, std::string message__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }

  TIllegalArgument(TIllegalArgument&&) = default;

  TIllegalArgument(const TIllegalArgument&) = default;

  TIllegalArgument& operator=(TIllegalArgument&&) = default;

  TIllegalArgument& operator=(const TIllegalArgument&) = default;
  void __clear();
  std::string message;

  struct __isset {
    bool message;
  } __isset = {};
  bool operator==(const TIllegalArgument& rhs) const;
  bool operator<(const TIllegalArgument& rhs) const;

  const std::string* get_message() const& {
    return __isset.message ? std::addressof(message) : nullptr;
  }

  std::string* get_message() & {
    return __isset.message ? std::addressof(message) : nullptr;
  }
  std::string* get_message() && = delete;

  template <typename T_TIllegalArgument_message_struct_setter = std::string>
  std::string& set_message(T_TIllegalArgument_message_struct_setter&& message_) {
    message = std::forward<T_TIllegalArgument_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return " ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< TIllegalArgument >;
};

void swap(TIllegalArgument& a, TIllegalArgument& b);
extern template void TIllegalArgument::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TIllegalArgument::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TIllegalArgument::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TIllegalArgument::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TIllegalArgument::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TIllegalArgument::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TIllegalArgument::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TIllegalArgument::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t TIllegalArgument::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::clear( ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::write(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::read(Protocol* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::serializedSize(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument>::serializedSizeZC(Protocol const* proto,  ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
