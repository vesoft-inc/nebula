/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "./gen-cpp2/hbase_types.h"

#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/gen/module_types_tcc.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/ProtocolReaderStructReadState.h>

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift

namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TColumn> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TResult> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TGet> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TPut> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TDelete> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TIncrement> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TAppend> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TScan> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TMutation> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TServerName> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TIOError> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits< ::apache::hadoop::hbase::thrift2::cpp2::TIllegalArgument> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TTimeRange::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_minStamp = false;
  bool isset_maxStamp = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_minStamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->minStamp);
    isset_minStamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_maxStamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->maxStamp);
    isset_maxStamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_minStamp) {
    TProtocolException::throwMissingRequiredField("minStamp", "TTimeRange");
  }
  if (!isset_maxStamp) {
    TProtocolException::throwMissingRequiredField("maxStamp", "TTimeRange");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TTimeRange>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_minStamp;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_maxStamp;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TTimeRange::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TTimeRange");
  xfer += prot_->serializedFieldSize("minStamp", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->minStamp);
  xfer += prot_->serializedFieldSize("maxStamp", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->maxStamp);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TTimeRange::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TTimeRange");
  xfer += prot_->serializedFieldSize("minStamp", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->minStamp);
  xfer += prot_->serializedFieldSize("maxStamp", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->maxStamp);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TTimeRange::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TTimeRange");
  xfer += prot_->writeFieldBegin("minStamp", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->minStamp);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("maxStamp", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->maxStamp);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TColumn::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_family = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_family:
  {
    iprot->readBinary(this->family);
    isset_family = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_qualifier:
  {
    iprot->readBinary(this->qualifier);
    this->__isset.qualifier = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timestamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->timestamp);
    this->__isset.timestamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_family) {
    TProtocolException::throwMissingRequiredField("family", "TColumn");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TColumn>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_family;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_qualifier;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_timestamp;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TColumn::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumn");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->family);
  if (this->__isset.qualifier) {
    xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeBinary(this->qualifier);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumn::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumn");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->family);
  if (this->__isset.qualifier) {
    xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeZCBinary(this->qualifier);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumn::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TColumn");
  xfer += prot_->writeFieldBegin("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->family);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.qualifier) {
    xfer += prot_->writeFieldBegin("qualifier", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeBinary(this->qualifier);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += prot_->writeFieldBegin("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timestamp);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TColumnValue::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_family = false;
  bool isset_qualifier = false;
  bool isset_value = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_family:
  {
    iprot->readBinary(this->family);
    isset_family = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_qualifier:
  {
    iprot->readBinary(this->qualifier);
    isset_qualifier = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_value:
  {
    iprot->readBinary(this->value);
    isset_value = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timestamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->timestamp);
    this->__isset.timestamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_tags:
  {
    iprot->readBinary(this->tags);
    this->__isset.tags = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_family) {
    TProtocolException::throwMissingRequiredField("family", "TColumnValue");
  }
  if (!isset_qualifier) {
    TProtocolException::throwMissingRequiredField("qualifier", "TColumnValue");
  }
  if (!isset_value) {
    TProtocolException::throwMissingRequiredField("value", "TColumnValue");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TColumnValue>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_family;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_qualifier;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_value;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_timestamp;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_tags;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TColumnValue::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumnValue");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->family);
  xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->qualifier);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->value);
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.tags) {
    xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeBinary(this->tags);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumnValue::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumnValue");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->family);
  xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->qualifier);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->value);
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.tags) {
    xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeZCBinary(this->tags);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumnValue::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TColumnValue");
  xfer += prot_->writeFieldBegin("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->family);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->qualifier);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.timestamp) {
    xfer += prot_->writeFieldBegin("timestamp", apache::thrift::protocol::T_I64, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timestamp);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += prot_->writeFieldBegin("tags", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeBinary(this->tags);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TColumnIncrement::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_family = false;
  bool isset_qualifier = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_family:
  {
    iprot->readBinary(this->family);
    isset_family = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_qualifier:
  {
    iprot->readBinary(this->qualifier);
    isset_qualifier = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_amount:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->amount);
    this->__isset.amount = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_family) {
    TProtocolException::throwMissingRequiredField("family", "TColumnIncrement");
  }
  if (!isset_qualifier) {
    TProtocolException::throwMissingRequiredField("qualifier", "TColumnIncrement");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TColumnIncrement>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_family;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_qualifier;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_amount;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TColumnIncrement::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumnIncrement");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->family);
  xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->qualifier);
  if (this->__isset.amount) {
    xfer += prot_->serializedFieldSize("amount", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->amount);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumnIncrement::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TColumnIncrement");
  xfer += prot_->serializedFieldSize("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->family);
  xfer += prot_->serializedFieldSize("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->qualifier);
  if (this->__isset.amount) {
    xfer += prot_->serializedFieldSize("amount", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->amount);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TColumnIncrement::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TColumnIncrement");
  xfer += prot_->writeFieldBegin("family", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->family);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("qualifier", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->qualifier);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.amount) {
    xfer += prot_->writeFieldBegin("amount", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->amount);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TResult::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_columnValues = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    this->__isset.row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columnValues:
  {
    this->columnValues = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::read(*iprot, this->columnValues);
    isset_columnValues = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_columnValues) {
    TProtocolException::throwMissingRequiredField("columnValues", "TResult");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TResult>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columnValues;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TResult::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TResult");
  if (this->__isset.row) {
    xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeBinary(this->row);
  }
  xfer += prot_->serializedFieldSize("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columnValues);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TResult::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TResult");
  if (this->__isset.row) {
    xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeZCBinary(this->row);
  }
  xfer += prot_->serializedFieldSize("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columnValues);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TResult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TResult");
  if (this->__isset.row) {
    xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeBinary(this->row);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::write(*prot_, this->columnValues);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TAuthorization::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_labels:
  {
    this->labels = std::vector<std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->labels);
    this->__isset.labels = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TAuthorization>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_labels;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TAuthorization::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TAuthorization");
  if (this->__isset.labels) {
    xfer += prot_->serializedFieldSize("labels", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->labels);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TAuthorization::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TAuthorization");
  if (this->__isset.labels) {
    xfer += prot_->serializedFieldSize("labels", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->labels);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TAuthorization::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TAuthorization");
  if (this->__isset.labels) {
    xfer += prot_->writeFieldBegin("labels", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->labels);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TCellVisibility::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_expression:
  {
    iprot->readString(this->expression);
    this->__isset.expression = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TCellVisibility>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_expression;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TCellVisibility::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TCellVisibility");
  if (this->__isset.expression) {
    xfer += prot_->serializedFieldSize("expression", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->expression);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TCellVisibility::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TCellVisibility");
  if (this->__isset.expression) {
    xfer += prot_->serializedFieldSize("expression", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->expression);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TCellVisibility::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TCellVisibility");
  if (this->__isset.expression) {
    xfer += prot_->writeFieldBegin("expression", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeString(this->expression);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TGet::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columns:
  {
    this->columns = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::read(*iprot, this->columns);
    this->__isset.columns = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timestamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->timestamp);
    this->__isset.timestamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_timeRange:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::read(iprot, &this->timeRange);
    this->__isset.timeRange = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_maxVersions:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->maxVersions);
    this->__isset.maxVersions = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_filterString:
  {
    iprot->readBinary(this->filterString);
    this->__isset.filterString = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_authorizations:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::read(iprot, &this->authorizations);
    this->__isset.authorizations = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TGet");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TGet>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columns;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_timestamp;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_timeRange;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_maxVersions;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_filterString;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_authorizations;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TGet::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TGet");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.timeRange) {
    xfer += prot_->serializedFieldSize("timeRange", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSize(prot_, &this->timeRange);
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->serializedFieldSize("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->maxVersions);
  }
  if (this->__isset.filterString) {
    xfer += prot_->serializedFieldSize("filterString", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeBinary(this->filterString);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.authorizations) {
    xfer += prot_->serializedFieldSize("authorizations", apache::thrift::protocol::T_STRUCT, 8);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSize(prot_, &this->authorizations);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TGet::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TGet");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.timeRange) {
    xfer += prot_->serializedFieldSize("timeRange", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSizeZC(prot_, &this->timeRange);
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->serializedFieldSize("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->maxVersions);
  }
  if (this->__isset.filterString) {
    xfer += prot_->serializedFieldSize("filterString", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeZCBinary(this->filterString);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.authorizations) {
    xfer += prot_->serializedFieldSize("authorizations", apache::thrift::protocol::T_STRUCT, 8);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSizeZC(prot_, &this->authorizations);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TGet::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TGet");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.columns) {
    xfer += prot_->writeFieldBegin("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::write(*prot_, this->columns);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += prot_->writeFieldBegin("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timestamp);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.timeRange) {
    xfer += prot_->writeFieldBegin("timeRange", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::write(prot_, &this->timeRange);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->writeFieldBegin("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->maxVersions);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.filterString) {
    xfer += prot_->writeFieldBegin("filterString", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->writeBinary(this->filterString);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.authorizations) {
    xfer += prot_->writeFieldBegin("authorizations", apache::thrift::protocol::T_STRUCT, 8);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::write(prot_, &this->authorizations);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TPut::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;
  bool isset_columnValues = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columnValues:
  {
    this->columnValues = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::read(*iprot, this->columnValues);
    isset_columnValues = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timestamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->timestamp);
    this->__isset.timestamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_durability:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::read(*iprot, this->durability);
    this->__isset.durability = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_cellVisibility:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::read(iprot, &this->cellVisibility);
    this->__isset.cellVisibility = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TPut");
  }
  if (!isset_columnValues) {
    TProtocolException::throwMissingRequiredField("columnValues", "TPut");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TPut>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columnValues;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_timestamp;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_durability;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_cellVisibility;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TPut::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TPut");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  xfer += prot_->serializedFieldSize("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columnValues);
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 7);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSize(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TPut::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TPut");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  xfer += prot_->serializedFieldSize("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columnValues);
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 7);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSizeZC(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TPut::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TPut");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("columnValues", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::write(*prot_, this->columnValues);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.timestamp) {
    xfer += prot_->writeFieldBegin("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timestamp);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.durability) {
    xfer += prot_->writeFieldBegin("durability", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::write(*prot_, this->durability);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->writeFieldBegin("cellVisibility", apache::thrift::protocol::T_STRUCT, 7);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::write(prot_, &this->cellVisibility);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TDelete::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columns:
  {
    this->columns = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::read(*iprot, this->columns);
    this->__isset.columns = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timestamp:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->timestamp);
    this->__isset.timestamp = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_deleteType:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::read(*iprot, this->deleteType);
    this->__isset.deleteType = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_durability:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::read(*iprot, this->durability);
    this->__isset.durability = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TDelete");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TDelete>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columns;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_timestamp;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_deleteType;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_durability;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TDelete::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TDelete");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.deleteType) {
    xfer += prot_->serializedFieldSize("deleteType", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::serializedSize<false>(*prot_, this->deleteType);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TDelete::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TDelete");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.timestamp) {
    xfer += prot_->serializedFieldSize("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timestamp);
  }
  if (this->__isset.deleteType) {
    xfer += prot_->serializedFieldSize("deleteType", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::serializedSize<false>(*prot_, this->deleteType);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TDelete::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TDelete");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.columns) {
    xfer += prot_->writeFieldBegin("columns", apache::thrift::protocol::T_LIST, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::write(*prot_, this->columns);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += prot_->writeFieldBegin("timestamp", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timestamp);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.deleteType) {
    xfer += prot_->writeFieldBegin("deleteType", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDeleteType>::write(*prot_, this->deleteType);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.durability) {
    xfer += prot_->writeFieldBegin("durability", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::write(*prot_, this->durability);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TIncrement::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;
  bool isset_columns = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columns:
  {
    this->columns = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>>::read(*iprot, this->columns);
    isset_columns = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          4,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_durability:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::read(*iprot, this->durability);
    this->__isset.durability = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_cellVisibility:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::read(iprot, &this->cellVisibility);
    this->__isset.cellVisibility = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TIncrement");
  }
  if (!isset_columns) {
    TProtocolException::throwMissingRequiredField("columns", "TIncrement");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TIncrement>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columns;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_durability;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_cellVisibility;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TIncrement::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIncrement");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>>::serializedSize<false>(*prot_, this->columns);
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSize(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIncrement::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIncrement");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>>::serializedSize<false>(*prot_, this->columns);
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSizeZC(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIncrement::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TIncrement");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnIncrement>>::write(*prot_, this->columns);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.durability) {
    xfer += prot_->writeFieldBegin("durability", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::write(*prot_, this->durability);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->writeFieldBegin("cellVisibility", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::write(prot_, &this->cellVisibility);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TAppend::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;
  bool isset_columns = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columns:
  {
    this->columns = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::read(*iprot, this->columns);
    isset_columns = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_durability:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::read(*iprot, this->durability);
    this->__isset.durability = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_cellVisibility:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::read(iprot, &this->cellVisibility);
    this->__isset.cellVisibility = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TAppend");
  }
  if (!isset_columns) {
    TProtocolException::throwMissingRequiredField("columns", "TAppend");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TAppend>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columns;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_durability;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_cellVisibility;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TAppend::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TAppend");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columns);
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSize(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TAppend::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TAppend");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::serializedSize<false>(*prot_, this->columns);
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.durability) {
    xfer += prot_->serializedFieldSize("durability", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::serializedSize<false>(*prot_, this->durability);
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->serializedFieldSize("cellVisibility", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::serializedSizeZC(prot_, &this->cellVisibility);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TAppend::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TAppend");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("columns", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumnValue>>::write(*prot_, this->columns);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.durability) {
    xfer += prot_->writeFieldBegin("durability", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::hadoop::hbase::thrift2::cpp2::TDurability>::write(*prot_, this->durability);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.cellVisibility) {
    xfer += prot_->writeFieldBegin("cellVisibility", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TCellVisibility>::write(prot_, &this->cellVisibility);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TScan::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_startRow:
  {
    iprot->readBinary(this->startRow);
    this->__isset.startRow = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_stopRow:
  {
    iprot->readBinary(this->stopRow);
    this->__isset.stopRow = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_columns:
  {
    this->columns = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::read(*iprot, this->columns);
    this->__isset.columns = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_caching:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->caching);
    this->__isset.caching = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_maxVersions:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->maxVersions);
    this->__isset.maxVersions = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_timeRange:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::read(iprot, &this->timeRange);
    this->__isset.timeRange = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_filterString:
  {
    iprot->readBinary(this->filterString);
    this->__isset.filterString = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_batchSize:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->batchSize);
    this->__isset.batchSize = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_attributes:
  {
    this->attributes = std::map<std::string, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->attributes);
    this->__isset.attributes = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_authorizations:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::read(iprot, &this->authorizations);
    this->__isset.authorizations = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_reversed:
  {
    iprot->readBool(this->reversed);
    this->__isset.reversed = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_cacheBlocks:
  {
    iprot->readBool(this->cacheBlocks);
    this->__isset.cacheBlocks = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_colFamTimeRangeMap:
  {
    this->colFamTimeRangeMap = std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>>::read(*iprot, this->colFamTimeRangeMap);
    this->__isset.colFamTimeRangeMap = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_small:
  {
    iprot->readBool(this->small);
    this->__isset.small = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TScan>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_startRow;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_stopRow;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_columns;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_caching;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_maxVersions;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_timeRange;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_filterString;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_batchSize;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_attributes;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_authorizations;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_reversed;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_cacheBlocks;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_colFamTimeRangeMap;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_small;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TScan::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TScan");
  if (this->__isset.startRow) {
    xfer += prot_->serializedFieldSize("startRow", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeBinary(this->startRow);
  }
  if (this->__isset.stopRow) {
    xfer += prot_->serializedFieldSize("stopRow", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeBinary(this->stopRow);
  }
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.caching) {
    xfer += prot_->serializedFieldSize("caching", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->caching);
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->serializedFieldSize("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->maxVersions);
  }
  if (this->__isset.timeRange) {
    xfer += prot_->serializedFieldSize("timeRange", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSize(prot_, &this->timeRange);
  }
  if (this->__isset.filterString) {
    xfer += prot_->serializedFieldSize("filterString", apache::thrift::protocol::T_STRING, 7);
    xfer += prot_->serializedSizeBinary(this->filterString);
  }
  if (this->__isset.batchSize) {
    xfer += prot_->serializedFieldSize("batchSize", apache::thrift::protocol::T_I32, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->batchSize);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.authorizations) {
    xfer += prot_->serializedFieldSize("authorizations", apache::thrift::protocol::T_STRUCT, 10);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSize(prot_, &this->authorizations);
  }
  if (this->__isset.reversed) {
    xfer += prot_->serializedFieldSize("reversed", apache::thrift::protocol::T_BOOL, 11);
    xfer += prot_->serializedSizeBool(this->reversed);
  }
  if (this->__isset.cacheBlocks) {
    xfer += prot_->serializedFieldSize("cacheBlocks", apache::thrift::protocol::T_BOOL, 12);
    xfer += prot_->serializedSizeBool(this->cacheBlocks);
  }
  if (this->__isset.colFamTimeRangeMap) {
    xfer += prot_->serializedFieldSize("colFamTimeRangeMap", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>>::serializedSize<false>(*prot_, this->colFamTimeRangeMap);
  }
  if (this->__isset.small) {
    xfer += prot_->serializedFieldSize("small", apache::thrift::protocol::T_BOOL, 14);
    xfer += prot_->serializedSizeBool(this->small);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TScan::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TScan");
  if (this->__isset.startRow) {
    xfer += prot_->serializedFieldSize("startRow", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeZCBinary(this->startRow);
  }
  if (this->__isset.stopRow) {
    xfer += prot_->serializedFieldSize("stopRow", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeZCBinary(this->stopRow);
  }
  if (this->__isset.columns) {
    xfer += prot_->serializedFieldSize("columns", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::serializedSize<false>(*prot_, this->columns);
  }
  if (this->__isset.caching) {
    xfer += prot_->serializedFieldSize("caching", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->caching);
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->serializedFieldSize("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->maxVersions);
  }
  if (this->__isset.timeRange) {
    xfer += prot_->serializedFieldSize("timeRange", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::serializedSizeZC(prot_, &this->timeRange);
  }
  if (this->__isset.filterString) {
    xfer += prot_->serializedFieldSize("filterString", apache::thrift::protocol::T_STRING, 7);
    xfer += prot_->serializedSizeZCBinary(this->filterString);
  }
  if (this->__isset.batchSize) {
    xfer += prot_->serializedFieldSize("batchSize", apache::thrift::protocol::T_I32, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->batchSize);
  }
  if (this->__isset.attributes) {
    xfer += prot_->serializedFieldSize("attributes", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->attributes);
  }
  if (this->__isset.authorizations) {
    xfer += prot_->serializedFieldSize("authorizations", apache::thrift::protocol::T_STRUCT, 10);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::serializedSizeZC(prot_, &this->authorizations);
  }
  if (this->__isset.reversed) {
    xfer += prot_->serializedFieldSize("reversed", apache::thrift::protocol::T_BOOL, 11);
    xfer += prot_->serializedSizeBool(this->reversed);
  }
  if (this->__isset.cacheBlocks) {
    xfer += prot_->serializedFieldSize("cacheBlocks", apache::thrift::protocol::T_BOOL, 12);
    xfer += prot_->serializedSizeBool(this->cacheBlocks);
  }
  if (this->__isset.colFamTimeRangeMap) {
    xfer += prot_->serializedFieldSize("colFamTimeRangeMap", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>>::serializedSize<false>(*prot_, this->colFamTimeRangeMap);
  }
  if (this->__isset.small) {
    xfer += prot_->serializedFieldSize("small", apache::thrift::protocol::T_BOOL, 14);
    xfer += prot_->serializedSizeBool(this->small);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TScan::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TScan");
  if (this->__isset.startRow) {
    xfer += prot_->writeFieldBegin("startRow", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeBinary(this->startRow);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.stopRow) {
    xfer += prot_->writeFieldBegin("stopRow", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeBinary(this->stopRow);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.columns) {
    xfer += prot_->writeFieldBegin("columns", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TColumn>>::write(*prot_, this->columns);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.caching) {
    xfer += prot_->writeFieldBegin("caching", apache::thrift::protocol::T_I32, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->caching);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.maxVersions) {
    xfer += prot_->writeFieldBegin("maxVersions", apache::thrift::protocol::T_I32, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->maxVersions);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.timeRange) {
    xfer += prot_->writeFieldBegin("timeRange", apache::thrift::protocol::T_STRUCT, 6);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>::write(prot_, &this->timeRange);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.filterString) {
    xfer += prot_->writeFieldBegin("filterString", apache::thrift::protocol::T_STRING, 7);
    xfer += prot_->writeBinary(this->filterString);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.batchSize) {
    xfer += prot_->writeFieldBegin("batchSize", apache::thrift::protocol::T_I32, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->batchSize);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += prot_->writeFieldBegin("attributes", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->attributes);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.authorizations) {
    xfer += prot_->writeFieldBegin("authorizations", apache::thrift::protocol::T_STRUCT, 10);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TAuthorization>::write(prot_, &this->authorizations);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.reversed) {
    xfer += prot_->writeFieldBegin("reversed", apache::thrift::protocol::T_BOOL, 11);
    xfer += prot_->writeBool(this->reversed);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.cacheBlocks) {
    xfer += prot_->writeFieldBegin("cacheBlocks", apache::thrift::protocol::T_BOOL, 12);
    xfer += prot_->writeBool(this->cacheBlocks);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.colFamTimeRangeMap) {
    xfer += prot_->writeFieldBegin("colFamTimeRangeMap", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::apache::hadoop::hbase::thrift2::cpp2::TTimeRange>>::write(*prot_, this->colFamTimeRangeMap);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.small) {
    xfer += prot_->writeFieldBegin("small", apache::thrift::protocol::T_BOOL, 14);
    xfer += prot_->writeBool(this->small);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TMutation::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      apache::thrift::detail::TccStructTraits<TMutation>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_put();
          ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TPut>::read(iprot, &this->mutable_put());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 2:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_deleteSingle();
          ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::read(iprot, &this->mutable_deleteSingle());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

}
template <class Protocol_>
uint32_t TMutation::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TMutation");
  switch(this->getType()) {
    case TMutation::Type::put:
    {
      xfer += prot_->serializedFieldSize("put", apache::thrift::protocol::T_STRUCT, 1);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TPut>::serializedSize(prot_, &this->get_put());
      break;
    }
    case TMutation::Type::deleteSingle:
    {
      xfer += prot_->serializedFieldSize("deleteSingle", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::serializedSize(prot_, &this->get_deleteSingle());
      break;
    }
    case TMutation::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TMutation::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TMutation");
  switch(this->getType()) {
    case TMutation::Type::put:
    {
      xfer += prot_->serializedFieldSize("put", apache::thrift::protocol::T_STRUCT, 1);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TPut>::serializedSizeZC(prot_, &this->get_put());
      break;
    }
    case TMutation::Type::deleteSingle:
    {
      xfer += prot_->serializedFieldSize("deleteSingle", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::serializedSizeZC(prot_, &this->get_deleteSingle());
      break;
    }
    case TMutation::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TMutation::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TMutation");
  switch(this->getType()) {
    case TMutation::Type::put:
    {
      xfer += prot_->writeFieldBegin("put", apache::thrift::protocol::T_STRUCT, 1);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TPut>::write(prot_, &this->get_put());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case TMutation::Type::deleteSingle:
    {
      xfer += prot_->writeFieldBegin("deleteSingle", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TDelete>::write(prot_, &this->get_deleteSingle());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case TMutation::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TRowMutations::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_row = false;
  bool isset_mutations = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_row:
  {
    iprot->readBinary(this->row);
    isset_row = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_mutations:
  {
    this->mutations = std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>>::read(*iprot, this->mutations);
    isset_mutations = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_row) {
    TProtocolException::throwMissingRequiredField("row", "TRowMutations");
  }
  if (!isset_mutations) {
    TProtocolException::throwMissingRequiredField("mutations", "TRowMutations");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TRowMutations>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_row;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_mutations;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TRowMutations::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TRowMutations");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->row);
  xfer += prot_->serializedFieldSize("mutations", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>>::serializedSize<false>(*prot_, this->mutations);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TRowMutations::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TRowMutations");
  xfer += prot_->serializedFieldSize("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->row);
  xfer += prot_->serializedFieldSize("mutations", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>>::serializedSize<false>(*prot_, this->mutations);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TRowMutations::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TRowMutations");
  xfer += prot_->writeFieldBegin("row", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->row);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mutations", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TMutation>>::write(*prot_, this->mutations);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void THRegionInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_regionId = false;
  bool isset_tableName = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_regionId:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->regionId);
    isset_regionId = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_tableName:
  {
    iprot->readBinary(this->tableName);
    isset_tableName = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_startKey:
  {
    iprot->readBinary(this->startKey);
    this->__isset.startKey = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_endKey:
  {
    iprot->readBinary(this->endKey);
    this->__isset.endKey = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_offline:
  {
    iprot->readBool(this->offline);
    this->__isset.offline = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_split:
  {
    iprot->readBool(this->split);
    this->__isset.split = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_replicaId:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->replicaId);
    this->__isset.replicaId = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_regionId) {
    TProtocolException::throwMissingRequiredField("regionId", "THRegionInfo");
  }
  if (!isset_tableName) {
    TProtocolException::throwMissingRequiredField("tableName", "THRegionInfo");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<THRegionInfo>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_regionId;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_tableName;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_startKey;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_endKey;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_offline;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_split;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_replicaId;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t THRegionInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("THRegionInfo");
  xfer += prot_->serializedFieldSize("regionId", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->regionId);
  xfer += prot_->serializedFieldSize("tableName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->tableName);
  if (this->__isset.startKey) {
    xfer += prot_->serializedFieldSize("startKey", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeBinary(this->startKey);
  }
  if (this->__isset.endKey) {
    xfer += prot_->serializedFieldSize("endKey", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeBinary(this->endKey);
  }
  if (this->__isset.offline) {
    xfer += prot_->serializedFieldSize("offline", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->offline);
  }
  if (this->__isset.split) {
    xfer += prot_->serializedFieldSize("split", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->serializedSizeBool(this->split);
  }
  if (this->__isset.replicaId) {
    xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->replicaId);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t THRegionInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("THRegionInfo");
  xfer += prot_->serializedFieldSize("regionId", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->regionId);
  xfer += prot_->serializedFieldSize("tableName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->tableName);
  if (this->__isset.startKey) {
    xfer += prot_->serializedFieldSize("startKey", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeZCBinary(this->startKey);
  }
  if (this->__isset.endKey) {
    xfer += prot_->serializedFieldSize("endKey", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeZCBinary(this->endKey);
  }
  if (this->__isset.offline) {
    xfer += prot_->serializedFieldSize("offline", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->offline);
  }
  if (this->__isset.split) {
    xfer += prot_->serializedFieldSize("split", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->serializedSizeBool(this->split);
  }
  if (this->__isset.replicaId) {
    xfer += prot_->serializedFieldSize("replicaId", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->replicaId);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t THRegionInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("THRegionInfo");
  xfer += prot_->writeFieldBegin("regionId", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->regionId);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("tableName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->tableName);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.startKey) {
    xfer += prot_->writeFieldBegin("startKey", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeBinary(this->startKey);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.endKey) {
    xfer += prot_->writeFieldBegin("endKey", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeBinary(this->endKey);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.offline) {
    xfer += prot_->writeFieldBegin("offline", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->writeBool(this->offline);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.split) {
    xfer += prot_->writeFieldBegin("split", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->writeBool(this->split);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.replicaId) {
    xfer += prot_->writeFieldBegin("replicaId", apache::thrift::protocol::T_I32, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->replicaId);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TServerName::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_hostName = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_hostName:
  {
    iprot->readString(this->hostName);
    isset_hostName = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_port:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->port);
    this->__isset.port = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_startCode:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->startCode);
    this->__isset.startCode = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_hostName) {
    TProtocolException::throwMissingRequiredField("hostName", "TServerName");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TServerName>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_hostName;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_port;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_startCode;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TServerName::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TServerName");
  xfer += prot_->serializedFieldSize("hostName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->hostName);
  if (this->__isset.port) {
    xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->port);
  }
  if (this->__isset.startCode) {
    xfer += prot_->serializedFieldSize("startCode", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->startCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TServerName::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TServerName");
  xfer += prot_->serializedFieldSize("hostName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->hostName);
  if (this->__isset.port) {
    xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->port);
  }
  if (this->__isset.startCode) {
    xfer += prot_->serializedFieldSize("startCode", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->startCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TServerName::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TServerName");
  xfer += prot_->writeFieldBegin("hostName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->hostName);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.port) {
    xfer += prot_->writeFieldBegin("port", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->port);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.startCode) {
    xfer += prot_->writeFieldBegin("startCode", apache::thrift::protocol::T_I64, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->startCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void THRegionLocation::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_serverName = false;
  bool isset_regionInfo = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_serverName:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::read(iprot, &this->serverName);
    isset_serverName = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_regionInfo:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::read(iprot, &this->regionInfo);
    isset_regionInfo = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_serverName) {
    TProtocolException::throwMissingRequiredField("serverName", "THRegionLocation");
  }
  if (!isset_regionInfo) {
    TProtocolException::throwMissingRequiredField("regionInfo", "THRegionLocation");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<THRegionLocation>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_serverName;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_regionInfo;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t THRegionLocation::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("THRegionLocation");
  xfer += prot_->serializedFieldSize("serverName", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::serializedSize(prot_, &this->serverName);
  xfer += prot_->serializedFieldSize("regionInfo", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::serializedSize(prot_, &this->regionInfo);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t THRegionLocation::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("THRegionLocation");
  xfer += prot_->serializedFieldSize("serverName", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::serializedSizeZC(prot_, &this->serverName);
  xfer += prot_->serializedFieldSize("regionInfo", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::serializedSizeZC(prot_, &this->regionInfo);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t THRegionLocation::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("THRegionLocation");
  xfer += prot_->writeFieldBegin("serverName", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::TServerName>::write(prot_, &this->serverName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("regionInfo", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::hadoop::hbase::thrift2::cpp2::THRegionInfo>::write(prot_, &this->regionInfo);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TIOError::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    iprot->readString(this->message);
    this->__isset.message = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TIOError>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TIOError::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIOError");
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIOError::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIOError");
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIOError::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TIOError");
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

template <class Protocol_>
void TIllegalArgument::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    iprot->readString(this->message);
    this->__isset.message = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    apache::thrift::detail::TccStructTraits<TIllegalArgument>::translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TIllegalArgument::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIllegalArgument");
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIllegalArgument::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TIllegalArgument");
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TIllegalArgument::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TIllegalArgument");
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // apache::hadoop::hbase::thrift2::cpp2
