/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/futures/Future.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/AsyncClient.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include "./gen-cpp2/hbase_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 { namespace cpp2 {

class THBaseServiceAsyncClient : public apache::thrift::GeneratedAsyncClient {
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  char const* getServiceName() const noexcept override {
    return "THBaseService";
  }

  virtual void exists(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual void exists(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 private:
  virtual void existsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 public:
  virtual bool sync_exists(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual bool sync_exists(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future<bool> future_exists(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture<bool> semifuture_exists(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future<bool> future_exists(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture<bool> semifuture_exists(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_exists(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_exists(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual void exists(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  static folly::exception_wrapper recv_wrapped_exists(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_exists(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_exists(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_exists(bool& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void existsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 public:
  virtual void existsAll(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void existsAll(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 private:
  virtual void existsAllImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 public:
  virtual void sync_existsAll(std::vector<bool>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void sync_existsAll(apache::thrift::RpcOptions& rpcOptions, std::vector<bool>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::vector<bool>> future_existsAll(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::vector<bool>> semifuture_existsAll(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::vector<bool>> future_existsAll(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::vector<bool>> semifuture_existsAll(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::pair<std::vector<bool>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_existsAll(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::pair<std::vector<bool>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_existsAll(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void existsAll(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  static folly::exception_wrapper recv_wrapped_existsAll(std::vector<bool>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_existsAll(std::vector<bool>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_existsAll(std::vector<bool>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_existsAll(std::vector<bool>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void existsAllT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 public:
  virtual void get(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual void get(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 private:
  virtual void getImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 public:
  virtual void sync_get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual void sync_get(apache::thrift::RpcOptions& rpcOptions,  ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_get(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_get(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_get(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_get(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::Future<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_get(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual folly::SemiFuture<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_get(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  virtual void get(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
  static folly::exception_wrapper recv_wrapped_get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_get( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TGet& tget);
 public:
  virtual void getMultiple(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void getMultiple(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 private:
  virtual void getMultipleImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 public:
  virtual void sync_getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void sync_getMultiple(apache::thrift::RpcOptions& rpcOptions, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::Future<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual folly::SemiFuture<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  virtual void getMultiple(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
  static folly::exception_wrapper recv_wrapped_getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getMultipleT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TGet>& tgets);
 public:
  virtual void put(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual void put(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 private:
  virtual void putImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 public:
  virtual void sync_put(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual void sync_put(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<folly::Unit> future_put(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<folly::Unit> semifuture_put(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<folly::Unit> future_put(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<folly::Unit> semifuture_put(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_put(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_put(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual void put(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  static folly::exception_wrapper recv_wrapped_put(::apache::thrift::ClientReceiveState& state);
  static void recv_put(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_put(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_put(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void putT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 public:
  virtual void checkAndPut(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual void checkAndPut(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 private:
  virtual void checkAndPutImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 public:
  virtual bool sync_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual bool sync_checkAndPut(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<bool> future_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<bool> semifuture_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<bool> future_checkAndPut(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<bool> semifuture_checkAndPut(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkAndPut(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual folly::SemiFuture<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_checkAndPut(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  virtual void checkAndPut(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
  static folly::exception_wrapper recv_wrapped_checkAndPut(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_checkAndPut(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_checkAndPut(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkAndPut(bool& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void checkAndPutT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TPut& tput);
 public:
  virtual void putMultiple(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual void putMultiple(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
 private:
  virtual void putMultipleImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
 public:
  virtual void sync_putMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual void sync_putMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::Future<folly::Unit> future_putMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::SemiFuture<folly::Unit> semifuture_putMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::Future<folly::Unit> future_putMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::SemiFuture<folly::Unit> semifuture_putMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_putMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_putMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  virtual void putMultiple(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
  static folly::exception_wrapper recv_wrapped_putMultiple(::apache::thrift::ClientReceiveState& state);
  static void recv_putMultiple(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_putMultiple(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_putMultiple(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void putMultipleT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TPut>& tputs);
 public:
  virtual void deleteSingle(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual void deleteSingle(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 private:
  virtual void deleteSingleImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 public:
  virtual void sync_deleteSingle(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual void sync_deleteSingle(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<folly::Unit> future_deleteSingle(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<folly::Unit> semifuture_deleteSingle(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<folly::Unit> future_deleteSingle(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<folly::Unit> semifuture_deleteSingle(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_deleteSingle(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_deleteSingle(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual void deleteSingle(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  static folly::exception_wrapper recv_wrapped_deleteSingle(::apache::thrift::ClientReceiveState& state);
  static void recv_deleteSingle(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_deleteSingle(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_deleteSingle(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void deleteSingleT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 public:
  virtual void deleteMultiple(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual void deleteMultiple(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
 private:
  virtual void deleteMultipleImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
 public:
  virtual void sync_deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual void sync_deleteMultiple(apache::thrift::RpcOptions& rpcOptions, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> future_deleteMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> semifuture_deleteMultiple(const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> future_deleteMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>> semifuture_deleteMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::Future<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_deleteMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual folly::SemiFuture<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_deleteMultiple(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  virtual void deleteMultiple(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
  static folly::exception_wrapper recv_wrapped_deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_deleteMultiple(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void deleteMultipleT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TDelete>& tdeletes);
 public:
  virtual void checkAndDelete(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual void checkAndDelete(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 private:
  virtual void checkAndDeleteImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 public:
  virtual bool sync_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual bool sync_checkAndDelete(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<bool> future_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<bool> semifuture_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<bool> future_checkAndDelete(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<bool> semifuture_checkAndDelete(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkAndDelete(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual folly::SemiFuture<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_checkAndDelete(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  virtual void checkAndDelete(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
  static folly::exception_wrapper recv_wrapped_checkAndDelete(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_checkAndDelete(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_checkAndDelete(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkAndDelete(bool& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void checkAndDeleteT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TDelete& tdelete);
 public:
  virtual void increment(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual void increment(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
 private:
  virtual void incrementImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
 public:
  virtual void sync_increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual void sync_increment(apache::thrift::RpcOptions& rpcOptions,  ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_increment(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_increment(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_increment(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_increment(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::Future<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_increment(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual folly::SemiFuture<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_increment(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  virtual void increment(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
  static folly::exception_wrapper recv_wrapped_increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_increment( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void incrementT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TIncrement& tincrement);
 public:
  virtual void append(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual void append(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
 private:
  virtual void appendImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
 public:
  virtual void sync_append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual void sync_append(apache::thrift::RpcOptions& rpcOptions,  ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_append(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_append(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::TResult> future_append(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::TResult> semifuture_append(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::Future<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_append(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual folly::SemiFuture<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::TResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_append(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  virtual void append(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
  static folly::exception_wrapper recv_wrapped_append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_append( ::apache::hadoop::hbase::thrift2::cpp2::TResult& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void appendT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TAppend& tappend);
 public:
  virtual void openScanner(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual void openScanner(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
 private:
  virtual void openScannerImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
 public:
  virtual int32_t sync_openScanner(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual int32_t sync_openScanner(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::Future<int32_t> future_openScanner(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::SemiFuture<int32_t> semifuture_openScanner(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::Future<int32_t> future_openScanner(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::SemiFuture<int32_t> semifuture_openScanner(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::Future<std::pair<int32_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_openScanner(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual folly::SemiFuture<std::pair<int32_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_openScanner(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  virtual void openScanner(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
  static folly::exception_wrapper recv_wrapped_openScanner(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int32_t recv_openScanner(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int32_t recv_instance_openScanner(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_openScanner(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void openScannerT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan);
 public:
  virtual void getScannerRows(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId, int32_t numRows);
  virtual void getScannerRows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId, int32_t numRows);
 private:
  virtual void getScannerRowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId, int32_t numRows);
 public:
  virtual void sync_getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, int32_t scannerId, int32_t numRows);
  virtual void sync_getScannerRows(apache::thrift::RpcOptions& rpcOptions, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, int32_t scannerId, int32_t numRows);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerRows(int32_t scannerId, int32_t numRows);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getScannerRows(int32_t scannerId, int32_t numRows);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerRows(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId, int32_t numRows);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getScannerRows(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId, int32_t numRows);
  virtual folly::Future<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getScannerRows(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId, int32_t numRows);
  virtual folly::SemiFuture<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getScannerRows(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId, int32_t numRows);
  virtual void getScannerRows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t scannerId, int32_t numRows);
  static folly::exception_wrapper recv_wrapped_getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getScannerRows(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getScannerRowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId, int32_t numRows);
 public:
  virtual void closeScanner(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId);
  virtual void closeScanner(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId);
 private:
  virtual void closeScannerImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId);
 public:
  virtual void sync_closeScanner(int32_t scannerId);
  virtual void sync_closeScanner(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId);
  virtual folly::Future<folly::Unit> future_closeScanner(int32_t scannerId);
  virtual folly::SemiFuture<folly::Unit> semifuture_closeScanner(int32_t scannerId);
  virtual folly::Future<folly::Unit> future_closeScanner(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId);
  virtual folly::SemiFuture<folly::Unit> semifuture_closeScanner(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_closeScanner(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_closeScanner(apache::thrift::RpcOptions& rpcOptions, int32_t scannerId);
  virtual void closeScanner(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t scannerId);
  static folly::exception_wrapper recv_wrapped_closeScanner(::apache::thrift::ClientReceiveState& state);
  static void recv_closeScanner(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_closeScanner(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_closeScanner(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void closeScannerT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t scannerId);
 public:
  virtual void mutateRow(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual void mutateRow(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
 private:
  virtual void mutateRowImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
 public:
  virtual void sync_mutateRow(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual void sync_mutateRow(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::Future<folly::Unit> future_mutateRow(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::SemiFuture<folly::Unit> semifuture_mutateRow(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::Future<folly::Unit> future_mutateRow(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::SemiFuture<folly::Unit> semifuture_mutateRow(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_mutateRow(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_mutateRow(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  virtual void mutateRow(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
  static folly::exception_wrapper recv_wrapped_mutateRow(::apache::thrift::ClientReceiveState& state);
  static void recv_mutateRow(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_mutateRow(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_mutateRow(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void mutateRowT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& trowMutations);
 public:
  virtual void getScannerResults(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual void getScannerResults(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
 private:
  virtual void getScannerResultsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
 public:
  virtual void sync_getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual void sync_getScannerResults(apache::thrift::RpcOptions& rpcOptions, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerResults(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getScannerResults(const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> future_getScannerResults(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>> semifuture_getScannerResults(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::Future<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getScannerResults(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual folly::SemiFuture<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getScannerResults(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  virtual void getScannerResults(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
  static folly::exception_wrapper recv_wrapped_getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getScannerResults(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::TResult>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getScannerResultsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const  ::apache::hadoop::hbase::thrift2::cpp2::TScan& tscan, int32_t numRows);
 public:
  virtual void getRegionLocation(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, bool reload);
  virtual void getRegionLocation(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, bool reload);
 private:
  virtual void getRegionLocationImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, bool reload);
 public:
  virtual void sync_getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, const std::string& table, const std::string& row, bool reload);
  virtual void sync_getRegionLocation(apache::thrift::RpcOptions& rpcOptions,  ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, const std::string& table, const std::string& row, bool reload);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> future_getRegionLocation(const std::string& table, const std::string& row, bool reload);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> semifuture_getRegionLocation(const std::string& table, const std::string& row, bool reload);
  virtual folly::Future< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> future_getRegionLocation(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, bool reload);
  virtual folly::SemiFuture< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation> semifuture_getRegionLocation(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, bool reload);
  virtual folly::Future<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getRegionLocation(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, bool reload);
  virtual folly::SemiFuture<std::pair< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getRegionLocation(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, bool reload);
  virtual void getRegionLocation(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::string& row, bool reload);
  static folly::exception_wrapper recv_wrapped_getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getRegionLocation( ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getRegionLocationT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, bool reload);
 public:
  virtual void getAllRegionLocations(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table);
  virtual void getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table);
 private:
  virtual void getAllRegionLocationsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table);
 public:
  virtual void sync_getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, const std::string& table);
  virtual void sync_getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, const std::string& table);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> future_getAllRegionLocations(const std::string& table);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> semifuture_getAllRegionLocations(const std::string& table);
  virtual folly::Future<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> future_getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, const std::string& table);
  virtual folly::SemiFuture<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>> semifuture_getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, const std::string& table);
  virtual folly::Future<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, const std::string& table);
  virtual folly::SemiFuture<std::pair<std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getAllRegionLocations(apache::thrift::RpcOptions& rpcOptions, const std::string& table);
  virtual void getAllRegionLocations(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table);
  static folly::exception_wrapper recv_wrapped_getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getAllRegionLocations(std::vector< ::apache::hadoop::hbase::thrift2::cpp2::THRegionLocation>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getAllRegionLocationsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table);
 public:
  virtual void checkAndMutate(std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual void checkAndMutate(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
 private:
  virtual void checkAndMutateImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
 public:
  virtual bool sync_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual bool sync_checkAndMutate(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::Future<bool> future_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::SemiFuture<bool> semifuture_checkAndMutate(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::Future<bool> future_checkAndMutate(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::SemiFuture<bool> semifuture_checkAndMutate(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkAndMutate(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual folly::SemiFuture<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_checkAndMutate(apache::thrift::RpcOptions& rpcOptions, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  virtual void checkAndMutate(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
  static folly::exception_wrapper recv_wrapped_checkAndMutate(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_checkAndMutate(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_checkAndMutate(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkAndMutate(bool& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void checkAndMutateT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier,  ::apache::hadoop::hbase::thrift2::cpp2::TCompareOp compareOp, const std::string& value, const  ::apache::hadoop::hbase::thrift2::cpp2::TRowMutations& rowMutations);
 public:
};

}}}}} // apache::hadoop::hbase::thrift2::cpp2
