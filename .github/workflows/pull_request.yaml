name: pull_request

on:
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master

jobs:
  build:
    name: build
    if: contains(join(toJson(github.event.pull_request.labels.*.name)), 'ready-for-testing')
    runs-on: self-hosted
    strategy:
      matrix:
        tag:
          - centos7
          - ubuntu1804
        compiler:
          - gcc
          - clang
        exclude:
          - tag: centos7
            compiler: clang
    container:
      image: vesoft/nebula-dev:${{ matrix.tag }}
      env:
        CCACHE_DIR: /tmp/ccache/${{ matrix.tag }}-${{ matrix.compiler }}
      options: --mount type=tmpfs,destination=/tmp/ccache,tmpfs-size=1073741824 -v /tmp/ccache/${{ matrix.tag }}-${{ matrix.compiler }}:/tmp/ccache/${{ matrix.tag }}-${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Ignore only documents changes
        id: ignore_docs
        run: |
          num_source_files=$(git --no-pager diff --name-only $(git log --oneline -n 1 | cut -d' ' -f1,5) | grep '^src\|^CMakeLists.txt\|^cmake\|^.github/workflows' | wc -l)
          echo "::set-output name=num_source_files::${num_source_files}"
      - name: Prepare environment
        run: |
          [ -f "$CCACHE_DIR/ccache.conf" ] || cp ci/ccache.conf "$CCACHE_DIR"
          [ -d build/ ] && rm -rf build/* || mkdir -p build
      - name: CMake with gcc
        if: matrix.compiler == 'gcc' && steps.ignore_docs.outputs.num_source_files != 0
        run: cd build && cmake ..
      - name: CMake with clang
        if: matrix.compiler == 'clang' && steps.ignore_docs.outputs.num_source_files != 0
        run: cd build && cmake -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_C_COMPILER=clang-8 -DENABLE_ASAN=on -DNEBULA_CLANG_USE_GCC_TOOLCHAIN=/opt/vesoft/toolset/gcc/7.5.0 ..
      - name: Make
        if: steps.ignore_docs.outputs.num_source_files != 0
        run: cd build && make -j $(nproc)
      - name: CTest with multiple threads
        if: steps.ignore_docs.outputs.num_source_files != 0
        timeout-minutes: 15
        run: cd build && ctest -j 6 --timeout 300 --output-on-failure --rerun-failed
      - name: CTest with single thread
        if: failure() && steps.ignore_docs.outputs.num_source_files != 0
        timeout-minutes: 30
        run: cd build && ASAN_OPTIONS=fast_unwind_on_malloc=0 ctest --timeout 300 --output-on-failure --rerun-failed
      - name: Cleanup
        if: always()
        run: rm -rf build
