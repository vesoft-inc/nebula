name: rc

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version such as '3.1.0'"
        required: true

concurrency:
  group: rc
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  package:
    name: build package
    runs-on: [self-hosted, nebula]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu1604
          - ubuntu1804
          - ubuntu2004
          - centos7
          - centos8
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
    env:
      BUILD_DIR: ./pkg-build
      CPACK_DIR: ./pkg-build/cpack_output
      SYMS_DIR: ./pkg-build/symbols
    steps:
      - uses: webiny/action-post-run@2.0.1
        with:
          run: sh -c "find . -mindepth 1 -delete"
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.7'
      - id: tag
        run: echo ::set-output name=tagnum::${{ github.event.inputs.version }}
      - name: package
        run: ./package/package.sh -v ${{ steps.tag.outputs.tagnum }}
      - name: output some vars
        run: |
          tar zcf ${{ env.CPACK_DIR }}/nebula-graph-${{ steps.tag.outputs.tagnum }}.tar.gz --exclude=${{ env.BUILD_DIR }} ./*
          find ${{ env.CPACK_DIR }} -type f \( -iname \*.deb -o -iname \*.rpm -o -iname \*.tar.gz \) -exec bash -c "sha256sum {} > {}.sha256sum.txt" \;
      - uses: ./.github/actions/upload-to-oss-action
        with:
          key-id: ${{ secrets.OSS_ID }}
          key-secret: ${{ secrets.OSS_SECRET }}
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          bucket: nebula-graph
          asset-path: ${{ env.CPACK_DIR }}
          target-path: rc/${{ steps.tag.outputs.tagnum }}
      - uses: ./.github/actions/upload-to-oss-action
        with:
          key-id: ${{ secrets.OSS_ID }}
          key-secret: ${{ secrets.OSS_SECRET }}
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          bucket: nebula-graph
          asset-path: ${{ env.SYMS_DIR }}
          target-path: rc/${{ steps.tag.outputs.tagnum }}/symbols

  docker_build:
    needs: package
    name: docker-build
    runs-on: [self-hosted, nebula]

    steps:
      - uses: webiny/action-post-run@2.0.1
        with:
          run: sh -c "find . -mindepth 1 -delete"
      - uses: actions/checkout@v2
      - id: tagname
        run: |
          echo ::set-output name=tag::"v${{ github.event.inputs.version }}"
          echo ::set-output name=tagnum::"${{ github.event.inputs.version }}"
          echo ::set-output name=majorver::"v$(echo ${{ github.event.inputs.version }} | cut -f1 -d'.')"
      - id: docker
        run: |
          graphdTag=""
          storagedTag=""
          metadTag=""
          toolsTag=""
          majorver=$(git tag -l --sort=v:refname | tail -n1 | cut -f1 -d".")
          if [[ $majorver == ${{ steps.tagname.outputs.majorver }} ]]; then
            graphdTag="${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-graphd:latest"
            storagedTag="${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-storaged:latest"
            metadTag="${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-metad:latest"
            toolsTag="${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-tools:latest"
          fi
          echo "::set-output name=graphdTag::$graphdTag"
          echo "::set-output name=storagedTag::$storagedTag"
          echo "::set-output name=metadTag::$metadTag"
          echo "::set-output name=toolsTag::$toolsTag"
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          registry: ${{ secrets.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: docker-graph
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-graphd:${{ steps.tagname.outputs.tag }}
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-graphd:${{ steps.tagname.outputs.majorver }}
            ${{ steps.docker.outputs.graphdTag }}
          target: graphd
          cache-to: type=local,dest=/tmp/buildx-cache,mode=max
          push: true
          build-args: |
            BRANCH=${{ steps.tagname.outputs.tag }}
            VERSION=${{ steps.tagname.outputs.tagnum }}
      - name: docker-storage
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-storaged:${{ steps.tagname.outputs.tag }}
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-storaged:${{ steps.tagname.outputs.majorver }}
            ${{ steps.docker.outputs.storagedTag }}
          target: storaged
          push: true
          cache-from: type=local,src=/tmp/buildx-cache
          build-args: |
            BRANCH=${{ steps.tagname.outputs.tag }}
            VERSION=${{ steps.tagname.outputs.tagnum }}
      - name: docker-meta
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-metad:${{ steps.tagname.outputs.tag }}
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-metad:${{ steps.tagname.outputs.majorver }}
            ${{ steps.docker.outputs.metadTag }}
          target: metad
          push: true
          cache-from: type=local,src=/tmp/buildx-cache
          build-args: |
            BRANCH=${{ steps.tagname.outputs.tag }}
            VERSION=${{ steps.tagname.outputs.tagnum }}
      - name: docker-tool
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-tools:${{ steps.tagname.outputs.tag }}
            ${{ secrets.HARBOR_REGISTRY }}/vesoft/nebula-tools:${{ steps.tagname.outputs.majorver }}
            ${{ steps.docker.outputs.toolsTag }}
          target: tools
          push: true
          cache-from: type=local,src=/tmp/buildx-cache
          build-args: |
            BRANCH=${{ steps.tagname.outputs.tag }}
            VERSION=${{ steps.tagname.outputs.tagnum }}
      - name: delete the cache
        run: |
          rm -rf /tmp/buildx-cache
  test:
    name: test
    needs: package
    runs-on: [self-hosted, nebula]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu1804
          - ubuntu2004
          - centos7
          - centos8
        extra_config:
          - "ENABLE_SSL=true CA_SIGNED=true QUERY_CONCURRENTLY=false"
          - "ENABLE_SSL=false CA_SIGNED=false QUERY_CONCURRENTLY=true"
    env:
      OSS_DIR: nebula-graph/rc
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
    steps:
      - uses: webiny/action-post-run@2.0.1
        with:
          run: sh -c "find . -mindepth 1 -delete"
      - uses: actions/checkout@v2
      - id: tag
        run: echo ::set-output name=tagnum::${{ github.event.inputs.version }}

      - id: oss_package
        run: |
          case ${{ matrix.os }} in
          ubuntu1804)
            echo "::set-output name=p::nebula-graph-${{ steps.tag.outputs.tagnum  }}.ubuntu1804.amd64.tar.gz"
            ;;
          ubuntu2004)
            echo "::set-output name=p::nebula-graph-${{ steps.tag.outputs.tagnum  }}.ubuntu2004.amd64.tar.gz"
            ;;
          centos7)
            echo "::set-output name=p::nebula-graph-${{ steps.tag.outputs.tagnum  }}.el7.x86_64.tar.gz"
            ;;
          centos8)
            echo "::set-output name=p::nebula-graph-${{ steps.tag.outputs.tagnum  }}.el8.x86_64.tar.gz"
            ;;
          esac
      - name: Prepare environment
        id: prepare
        run: |
          [ -d build/ ] && rm -rf build/* || mkdir -p build
          make init -C tests
      - name: CMake
        id: cmake
        run: |
          echo "::set-output name=j::8"
      - name: download from oss
        run: |
          ossutil64 -e ${{ secrets.OSS_ENDPOINT }} \
                    -i ${{ secrets.OSS_ID }} \
                    -k  ${{ secrets.OSS_SECRET }} \
                    -f cp oss://${{ env.OSS_DIR  }}/${{ steps.tag.outputs.tagnum }}/${{ steps.oss_package.outputs.p }} \
                    build/.
          tar zxvf build/${{ steps.oss_package.outputs.p }} -C build
          d=`echo ${{ steps.oss_package.outputs.p }} | sed 's/.tar.gz//'`
          mv build/${d}/* build/.
     
      - name: Setup cluster
        run: |
          make CONTAINERIZED=true ${{ matrix.extra_config }} up
        working-directory: tests/
        timeout-minutes: 2
      - name: Pytest
        run: |
          make RM_DIR=false DEBUG=false J=${{ steps.cmake.outputs.j }} test
        working-directory: tests/
        timeout-minutes: 15
      - name: TCK
        run: |
          make RM_DIR=false DEBUG=false J=${{ steps.cmake.outputs.j }} tck
        working-directory: tests/
        timeout-minutes: 60
      - name: Down cluster
        run: |
          make RM_DIR=false down
        working-directory: tests/
        timeout-minutes: 2
      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: ${{ matrix.os }}-${{ matrix.compiler }}-nebula-test-logs
          path:  ./build/server_*/logs*/
