name: pull_request

on:
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master
      - 'v[0-9]+.*'

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: lint
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ready-for-testing') && github.event.pull_request.merged != true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cpplint
        run: |
          ln -snf $PWD/.linters/cpp/hooks/pre-commit.sh $PWD/.linters/cpp/pre-commit.sh
          .linters/cpp/pre-commit.sh $(git --no-pager diff --diff-filter=d --name-only HEAD^ HEAD)
      - name: Format check
        run: |
          res=$(git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-10/clang-format-diff.py -p1)
          [[ ! -z "$res" ]] && exit 1 || true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare Gherkin exec environ
        run: make init-all -C tests
      - name: Check Gherkin feature format
        run: make check -C tests

  build:
    name: build
    needs: lint
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os:
          - centos7
          - ubuntu2004
        compiler:
          - gcc-9.2
          - clang-10
        exclude:
          - os: centos7
            compiler: clang-10
    env:
      CCACHE_DIR: /tmp/ccache/nebula/${{ matrix.os }}-${{ matrix.compiler }}
      CCACHE_MAXSIZE: 8G
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
      volumes:
        - /tmp/ccache/nebula/${{ matrix.os }}-${{ matrix.compiler }}:/tmp/ccache/nebula/${{ matrix.os }}-${{ matrix.compiler }}
      options: --cap-add=SYS_PTRACE
    steps:
      - uses: webiny/action-post-run@2.0.1
        with:
          run: sh -c "find . -mindepth 1 -delete"
      - uses: actions/checkout@v2
      - name: Prepare environment
        id: prepare
        run: |
          [ -d build/ ] && rm -rf build/* || mkdir -p build
          make init -C tests
      - name: CMake
        id: cmake
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            case ${{ matrix.os }} in
            centos7)
              # build with Release type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DENABLE_TESTING=on \
                  -B build
              echo "::set-output name=j::10"
              echo "::set-output name=t::$(nproc)"
              ;;
            ubuntu2004)
              # build with Debug type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DENABLE_TESTING=on \
                  -DENABLE_COVERAGE=on \
                  -B build
              echo "::set-output name=j::10"
              echo "::set-output name=t::7"
              ;;
            esac
            ;;
          clang-*)
            # build with Sanitizer
            cmake \
                -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/clang++ \
                -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/clang \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DENABLE_ASAN=on \
                -DENABLE_TESTING=on \
                -B build
            echo "::set-output name=j::6"
            echo "::set-output name=t::10"
            ;;
          esac
      - name: Make
        run: |
          ccache -z
          cmake --build build/ -j ${{ steps.cmake.outputs.t }}
          ccache -s
      - name: CTest
        env:
          ASAN_OPTIONS: fast_unwind_on_malloc=1
        run: ctest -j $(($(nproc)/2+1)) --timeout 400 --output-on-failure
        working-directory: build/
        timeout-minutes: 20
      - name: Setup cluster
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            case ${{ matrix.os }} in
            centos7)
              # normal cluster
              make CONTAINERIZED=true up
              ;;
            ubuntu2004)
              # ssl cluster
              make CONTAINERIZED=true ENABLE_SSL=true CA_SIGNED=true up
              ;;
            esac
            ;;
          clang-*)
            # graph ssl only cluster
            make CONTAINERIZED=true ENABLE_SSL=false ENABLE_GRAPH_SSL=true up
            ;;
          esac
        working-directory: tests/
        timeout-minutes: 2
      - name: Pytest
        run: |
          make RM_DIR=false DEBUG=false J=${{ steps.cmake.outputs.j }} test
        working-directory: tests/
        timeout-minutes: 15
      - name: TCK
        run: |
          make RM_DIR=false DEBUG=false J=${{ steps.cmake.outputs.j }} tck
        working-directory: tests/
        timeout-minutes: 60
      - name: Down cluster
        run: |
          make RM_DIR=false down
        working-directory: tests/
        timeout-minutes: 2
      - name: coverage
        if: ${{ matrix.compiler == 'gcc-9.2' && matrix.os == 'ubuntu2004' }}
        run: |
            ~/.local/bin/fastcov -d build -l -o fastcov.info -p --exclude /usr/include --exclude=/opt/vesoft --exclude scanner.lex
            bash <(curl -s https://codecov.io/bash) -Z -f fastcov.info
      - name: Sanitizer
        if: ${{ always() }}
        run: |
          exit $(grep -P "SUMMARY: AddressSanitizer: \d+ byte\(s\) leaked in \d+ allocation\(s\)\." build/server_*/logs/*stderr.log | wc -l)
      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: ${{ matrix.os }}-${{ matrix.compiler }}-nebula-test-logs
          path:  ./build/server_*/logs/
